/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#define SWIGJAVA


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else


#include <stdint.h>		// Use the C99 official header


#include <string>


#include <stdexcept>


#include <vector>
#include <stdexcept>


#include <list>


template<class T> class ListIterator {
private:
  const	std::list<T>& _list;
	typename std::list<T>::const_iterator _iter;
public:
	ListIterator(const std::list<T>& list) : _list(list),  _iter(list.begin()) {}

	bool hasNext() const	{
		return _iter != _list.end();
	}

  const T nextImpl()	{
    const T ret = *_iter;
		_iter++;
		return ret;
	}
};


#include <map>
#include <algorithm>
#include <stdexcept>


 #include <boost/scoped_ptr.hpp> 
 #include "swig/jniutil.h"


#include "pbrpc/RPC.pb.h"
#include "xtreemfs/GlobalTypes.pb.h"
#include "xtreemfs/DIR.pb.h"
#include "xtreemfs/OSD.pb.h"
#include "xtreemfs/MRC.pb.h"

SWIGINTERN std::vector< std::string >::const_reference std_vector_Sl_std_string_Sg__get(std::vector< std::string > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_std_string_Sg__set(std::vector< std::string > *self,int i,std::vector< std::string >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< int >::const_reference std_vector_Sl_int_Sg__get(std::vector< int > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_int_Sg__set(std::vector< int > *self,int i,std::vector< int >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN ListIterator< std::string > *std_list_Sl_std_string_Sg__iterator(std::list< std::string > const *self){
            return new ListIterator<std::string>(*self);
          }
SWIGINTERN std::string const &std_map_Sl_std_string_Sc_std_string_Sg__get(std::map< std::string,std::string > *self,std::string const &key){
                std::map<std::string,std::string >::iterator i = self->find(key);
                if (i != self->end())
                    return i->second;
                else
                    throw std::out_of_range("key not found");
            }
SWIGINTERN void std_map_Sl_std_string_Sc_std_string_Sg__set(std::map< std::string,std::string > *self,std::string const &key,std::string const &x){
                (*self)[key] = x;
            }
SWIGINTERN void std_map_Sl_std_string_Sc_std_string_Sg__del(std::map< std::string,std::string > *self,std::string const &key){
                std::map<std::string,std::string >::iterator i = self->find(key);
                if (i != self->end())
                    self->erase(i);
                else
                    throw std::out_of_range("key not found");
            }
SWIGINTERN bool std_map_Sl_std_string_Sc_std_string_Sg__has_key(std::map< std::string,std::string > *self,std::string const &key){
                std::map<std::string,std::string >::iterator i = self->find(key);
                return i != self->end();
            }
 #include "libxtreemfs/typedefs.h" 
 #include "libxtreemfs/user_mapping.h" 
 #include <boost/asio/ssl/context.hpp> 
 #include "libxtreemfs/options.h" 
 #include "rpc/ssl_options.h" 
 #include "util/logging.h" 
 #include "libxtreemfs/xtreemfs_exception.h" 
 #include "libxtreemfs/uuid_resolver.h" 
 #include "libxtreemfs/client.h" 
 #include "libxtreemfs/volume.h" 
 #include "libxtreemfs/file_handle.h" 
SWIGINTERN int xtreemfs_FileHandle_readDirect(xtreemfs::FileHandle *self,char *directBuffer,size_t count,int64_t offset){
    return self->Read(directBuffer, count, offset);
  }
SWIGINTERN int xtreemfs_FileHandle_writeDirect(xtreemfs::FileHandle *self,char const *directBuffer,size_t count,int64_t offset){
    return self->Write(directBuffer, count, offset);
  }
SWIGINTERN int xtreemfs_FileHandle_read__SWIG_1(xtreemfs::FileHandle *self,char *buf,int buf_offset,size_t count,int64_t offset){
    return self->Read(buf + buf_offset, count, offset);
  }
SWIGINTERN int xtreemfs_FileHandle_write__SWIG_1(xtreemfs::FileHandle *self,char const *buf,int buf_offset,size_t count,int64_t offset){
    return self->Write(buf + buf_offset, count, offset);
  }

#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jlong JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_new_1StringVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< std::string > *)new std::vector< std::string >();
  *(std::vector< std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_new_1StringVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< std::string >::size_type arg1 ;
  std::vector< std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< std::string >::size_type)jarg1; 
  result = (std::vector< std::string > *)new std::vector< std::string >(arg1);
  *(std::vector< std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_StringVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  result = ((std::vector< std::string > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_StringVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  result = ((std::vector< std::string > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_StringVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  arg2 = (std::vector< std::string >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_StringVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  result = (bool)((std::vector< std::string > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_StringVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_StringVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::vector< std::string >::value_type arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->push_back((std::vector< std::string >::value_type const &)*arg2);
}


SWIGEXPORT jstring JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_StringVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::vector< std::string >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< std::string >::value_type *) &std_vector_Sl_std_string_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_StringVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::vector< std::string >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  arg2 = (int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::vector< std::string >::value_type arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  try {
    std_vector_Sl_std_string_Sg__set(arg1,arg2,(std::string const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_delete_1StringVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_new_1IntVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< int > *)new std::vector< int >();
  *(std::vector< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_new_1IntVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< int >::size_type arg1 ;
  std::vector< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< int >::size_type)jarg1; 
  result = (std::vector< int > *)new std::vector< int >(arg1);
  *(std::vector< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_IntVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  result = ((std::vector< int > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_IntVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  result = ((std::vector< int > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_IntVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  arg2 = (std::vector< int >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_IntVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  result = (bool)((std::vector< int > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_IntVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_IntVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::value_type *arg2 = 0 ;
  std::vector< int >::value_type temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  temp2 = (std::vector< int >::value_type)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((std::vector< int >::value_type const &)*arg2);
}


SWIGEXPORT jint JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_IntVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  std::vector< int >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< int >::value_type *) &std_vector_Sl_int_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  jresult = (jint)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_IntVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  std::vector< int >::value_type *arg3 = 0 ;
  std::vector< int >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (std::vector< int >::value_type)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_int_Sg__set(arg1,arg2,(int const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_delete_1IntVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< int > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_new_1StringList_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::list< std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::list< std::string > *)new std::list< std::string >();
  *(std::list< std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_new_1StringList_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::list< std::string >::size_type arg1 ;
  std::list< std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::list< std::string >::size_type)jarg1; 
  result = (std::list< std::string > *)new std::list< std::string >(arg1);
  *(std::list< std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_StringList_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::list< std::string > *arg1 = (std::list< std::string > *) 0 ;
  std::list< std::string >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< std::string > **)&jarg1; 
  result = ((std::list< std::string > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_StringList_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::list< std::string > *arg1 = (std::list< std::string > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< std::string > **)&jarg1; 
  result = (bool)((std::list< std::string > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_StringList_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::list< std::string > *arg1 = (std::list< std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< std::string > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_StringList_1reverse(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::list< std::string > *arg1 = (std::list< std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< std::string > **)&jarg1; 
  (arg1)->reverse();
}


SWIGEXPORT void JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_StringList_1addFirst(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  std::list< std::string > *arg1 = (std::list< std::string > *) 0 ;
  std::list< std::string >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< std::string > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::list< std::string >::value_type arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->push_front((std::list< std::string >::value_type const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_StringList_1addLast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  std::list< std::string > *arg1 = (std::list< std::string > *) 0 ;
  std::list< std::string >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< std::string > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::list< std::string >::value_type arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->push_back((std::list< std::string >::value_type const &)*arg2);
}


SWIGEXPORT jstring JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_StringList_1getFirst(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  std::list< std::string > *arg1 = (std::list< std::string > *) 0 ;
  std::list< std::string >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< std::string > **)&jarg1; 
  result = (std::list< std::string >::value_type *) &(arg1)->front();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_StringList_1getLast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  std::list< std::string > *arg1 = (std::list< std::string > *) 0 ;
  std::list< std::string >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< std::string > **)&jarg1; 
  result = (std::list< std::string >::value_type *) &(arg1)->back();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_StringList_1removeFirst(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::list< std::string > *arg1 = (std::list< std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< std::string > **)&jarg1; 
  (arg1)->pop_front();
}


SWIGEXPORT void JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_StringList_1removeLast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::list< std::string > *arg1 = (std::list< std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< std::string > **)&jarg1; 
  (arg1)->pop_back();
}


SWIGEXPORT jlong JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_StringList_1iterator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::list< std::string > *arg1 = (std::list< std::string > *) 0 ;
  ListIterator< std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< std::string > **)&jarg1; 
  result = (ListIterator< std::string > *)std_list_Sl_std_string_Sg__iterator((std::list< std::string > const *)arg1);
  *(ListIterator< std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_delete_1StringList(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::list< std::string > *arg1 = (std::list< std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::list< std::string > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_new_1StringListIterator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::list< std::string > *arg1 = 0 ;
  ListIterator< std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< std::string > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::list< std::string > const & reference is null");
    return 0;
  } 
  result = (ListIterator< std::string > *)new ListIterator< std::string >((std::list< std::string > const &)*arg1);
  *(ListIterator< std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_StringListIterator_1hasNext(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ListIterator< std::string > *arg1 = (ListIterator< std::string > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListIterator< std::string > **)&jarg1; 
  result = (bool)((ListIterator< std::string > const *)arg1)->hasNext();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_StringListIterator_1nextImpl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ListIterator< std::string > *arg1 = (ListIterator< std::string > *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListIterator< std::string > **)&jarg1; 
  result = (arg1)->nextImpl();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_delete_1StringListIterator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ListIterator< std::string > *arg1 = (ListIterator< std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ListIterator< std::string > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_new_1StringMap_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::map< std::string,std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::map< std::string,std::string > *)new std::map< std::string,std::string >();
  *(std::map< std::string,std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_new_1StringMap_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::map< std::string,std::string > *arg1 = 0 ;
  std::map< std::string,std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,std::string > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::map< std::string,std::string > const & reference is null");
    return 0;
  } 
  result = (std::map< std::string,std::string > *)new std::map< std::string,std::string >((std::map< std::string,std::string > const &)*arg1);
  *(std::map< std::string,std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_StringMap_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,std::string > **)&jarg1; 
  result = (unsigned int)((std::map< std::string,std::string > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_StringMap_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,std::string > **)&jarg1; 
  result = (bool)((std::map< std::string,std::string > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_StringMap_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,std::string > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jstring JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_StringMap_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::string *arg2 = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,std::string > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  try {
    result = (std::string *) &std_map_Sl_std_string_Sc_std_string_Sg__get(arg1,(std::string const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_StringMap_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,std::string > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  std_map_Sl_std_string_Sc_std_string_Sg__set(arg1,(std::string const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORT void JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_StringMap_1del(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,std::string > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  try {
    std_map_Sl_std_string_Sc_std_string_Sg__del(arg1,(std::string const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT jboolean JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_StringMap_1has_1key(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,std::string > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)std_map_Sl_std_string_Sc_std_string_Sg__has_key(arg1,(std::string const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_delete_1StringMap(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::map< std::string,std::string > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_new_1ServiceAddresses_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  xtreemfs::ServiceAddresses *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (xtreemfs::ServiceAddresses *)new xtreemfs::ServiceAddresses((std::string const &)*arg1);
  *(xtreemfs::ServiceAddresses **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_new_1ServiceAddresses_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::string > *arg1 = 0 ;
  xtreemfs::ServiceAddresses *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::string > const & reference is null");
    return 0;
  } 
  result = (xtreemfs::ServiceAddresses *)new xtreemfs::ServiceAddresses((std::vector< std::string > const &)*arg1);
  *(xtreemfs::ServiceAddresses **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_delete_1ServiceAddresses(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  xtreemfs::ServiceAddresses *arg1 = (xtreemfs::ServiceAddresses *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(xtreemfs::ServiceAddresses **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_new_1OptionsProxy(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  xtreemfs::Options *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (xtreemfs::Options *)new xtreemfs::Options();
  *(xtreemfs::Options **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_delete_1OptionsProxy(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  xtreemfs::Options *arg1 = (xtreemfs::Options *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(xtreemfs::Options **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_OptionsProxy_1version_1string_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  xtreemfs::Options *arg1 = (xtreemfs::Options *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xtreemfs::Options **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->version_string = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_OptionsProxy_1version_1string_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  xtreemfs::Options *arg1 = (xtreemfs::Options *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xtreemfs::Options **)&jarg1; 
  result = (std::string *) & ((arg1)->version_string);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_OptionsProxy_1xtreemfs_1url_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  xtreemfs::Options *arg1 = (xtreemfs::Options *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xtreemfs::Options **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->xtreemfs_url = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_OptionsProxy_1xtreemfs_1url_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  xtreemfs::Options *arg1 = (xtreemfs::Options *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xtreemfs::Options **)&jarg1; 
  result = (std::string *) & ((arg1)->xtreemfs_url);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_OptionsProxy_1service_1addresses_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  xtreemfs::Options *arg1 = (xtreemfs::Options *) 0 ;
  xtreemfs::ServiceAddresses *arg2 = (xtreemfs::ServiceAddresses *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(xtreemfs::Options **)&jarg1; 
  arg2 = *(xtreemfs::ServiceAddresses **)&jarg2; 
  if (arg1) (arg1)->service_addresses = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_OptionsProxy_1service_1addresses_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  xtreemfs::Options *arg1 = (xtreemfs::Options *) 0 ;
  xtreemfs::ServiceAddresses *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xtreemfs::Options **)&jarg1; 
  result = (xtreemfs::ServiceAddresses *)& ((arg1)->service_addresses);
  *(xtreemfs::ServiceAddresses **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_OptionsProxy_1volume_1name_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  xtreemfs::Options *arg1 = (xtreemfs::Options *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xtreemfs::Options **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->volume_name = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_OptionsProxy_1volume_1name_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  xtreemfs::Options *arg1 = (xtreemfs::Options *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xtreemfs::Options **)&jarg1; 
  result = (std::string *) & ((arg1)->volume_name);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_OptionsProxy_1protocol_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  xtreemfs::Options *arg1 = (xtreemfs::Options *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xtreemfs::Options **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->protocol = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_OptionsProxy_1protocol_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  xtreemfs::Options *arg1 = (xtreemfs::Options *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xtreemfs::Options **)&jarg1; 
  result = (std::string *) & ((arg1)->protocol);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_OptionsProxy_1mount_1point_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  xtreemfs::Options *arg1 = (xtreemfs::Options *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xtreemfs::Options **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->mount_point = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_OptionsProxy_1mount_1point_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  xtreemfs::Options *arg1 = (xtreemfs::Options *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xtreemfs::Options **)&jarg1; 
  result = (std::string *) & ((arg1)->mount_point);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_OptionsProxy_1log_1level_1string_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  xtreemfs::Options *arg1 = (xtreemfs::Options *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xtreemfs::Options **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->log_level_string = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_OptionsProxy_1log_1level_1string_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  xtreemfs::Options *arg1 = (xtreemfs::Options *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xtreemfs::Options **)&jarg1; 
  result = (std::string *) & ((arg1)->log_level_string);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_OptionsProxy_1log_1file_1path_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  xtreemfs::Options *arg1 = (xtreemfs::Options *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xtreemfs::Options **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->log_file_path = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_OptionsProxy_1log_1file_1path_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  xtreemfs::Options *arg1 = (xtreemfs::Options *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xtreemfs::Options **)&jarg1; 
  result = (std::string *) & ((arg1)->log_file_path);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_OptionsProxy_1show_1help_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  xtreemfs::Options *arg1 = (xtreemfs::Options *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xtreemfs::Options **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->show_help = arg2;
}


SWIGEXPORT jboolean JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_OptionsProxy_1show_1help_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  xtreemfs::Options *arg1 = (xtreemfs::Options *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xtreemfs::Options **)&jarg1; 
  result = (bool) ((arg1)->show_help);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_OptionsProxy_1empty_1arguments_1list_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  xtreemfs::Options *arg1 = (xtreemfs::Options *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xtreemfs::Options **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->empty_arguments_list = arg2;
}


SWIGEXPORT jboolean JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_OptionsProxy_1empty_1arguments_1list_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  xtreemfs::Options *arg1 = (xtreemfs::Options *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xtreemfs::Options **)&jarg1; 
  result = (bool) ((arg1)->empty_arguments_list);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_OptionsProxy_1show_1version_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  xtreemfs::Options *arg1 = (xtreemfs::Options *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xtreemfs::Options **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->show_version = arg2;
}


SWIGEXPORT jboolean JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_OptionsProxy_1show_1version_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  xtreemfs::Options *arg1 = (xtreemfs::Options *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xtreemfs::Options **)&jarg1; 
  result = (bool) ((arg1)->show_version);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_OptionsProxy_1metadata_1cache_1size_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  xtreemfs::Options *arg1 = (xtreemfs::Options *) 0 ;
  uint64_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xtreemfs::Options **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return ;
    }
    clazz = jenv->GetObjectClass(jarg2);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg2, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    for(i=0; i<sz; i++) {
      arg2 = (arg2 << 8) | (uint64_t)(unsigned char)bae[i];
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  if (arg1) (arg1)->metadata_cache_size = arg2;
}


SWIGEXPORT jobject JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_OptionsProxy_1metadata_1cache_1size_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobject jresult = 0 ;
  xtreemfs::Options *arg1 = (xtreemfs::Options *) 0 ;
  uint64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xtreemfs::Options **)&jarg1; 
  result = (uint64_t) ((arg1)->metadata_cache_size);
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jresult = bigint;
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_OptionsProxy_1metadata_1cache_1ttl_1s_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  xtreemfs::Options *arg1 = (xtreemfs::Options *) 0 ;
  uint64_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xtreemfs::Options **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return ;
    }
    clazz = jenv->GetObjectClass(jarg2);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg2, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    for(i=0; i<sz; i++) {
      arg2 = (arg2 << 8) | (uint64_t)(unsigned char)bae[i];
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  if (arg1) (arg1)->metadata_cache_ttl_s = arg2;
}


SWIGEXPORT jobject JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_OptionsProxy_1metadata_1cache_1ttl_1s_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobject jresult = 0 ;
  xtreemfs::Options *arg1 = (xtreemfs::Options *) 0 ;
  uint64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xtreemfs::Options **)&jarg1; 
  result = (uint64_t) ((arg1)->metadata_cache_ttl_s);
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jresult = bigint;
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_OptionsProxy_1enable_1async_1writes_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  xtreemfs::Options *arg1 = (xtreemfs::Options *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xtreemfs::Options **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->enable_async_writes = arg2;
}


SWIGEXPORT jboolean JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_OptionsProxy_1enable_1async_1writes_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  xtreemfs::Options *arg1 = (xtreemfs::Options *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xtreemfs::Options **)&jarg1; 
  result = (bool) ((arg1)->enable_async_writes);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_OptionsProxy_1async_1writes_1max_1requests_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  xtreemfs::Options *arg1 = (xtreemfs::Options *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xtreemfs::Options **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->async_writes_max_requests = arg2;
}


SWIGEXPORT jint JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_OptionsProxy_1async_1writes_1max_1requests_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  xtreemfs::Options *arg1 = (xtreemfs::Options *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xtreemfs::Options **)&jarg1; 
  result = (int) ((arg1)->async_writes_max_requests);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_OptionsProxy_1async_1writes_1max_1request_1size_1kb_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  xtreemfs::Options *arg1 = (xtreemfs::Options *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xtreemfs::Options **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->async_writes_max_request_size_kb = arg2;
}


SWIGEXPORT jint JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_OptionsProxy_1async_1writes_1max_1request_1size_1kb_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  xtreemfs::Options *arg1 = (xtreemfs::Options *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xtreemfs::Options **)&jarg1; 
  result = (int) ((arg1)->async_writes_max_request_size_kb);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_OptionsProxy_1readdir_1chunk_1size_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  xtreemfs::Options *arg1 = (xtreemfs::Options *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xtreemfs::Options **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->readdir_chunk_size = arg2;
}


SWIGEXPORT jint JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_OptionsProxy_1readdir_1chunk_1size_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  xtreemfs::Options *arg1 = (xtreemfs::Options *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xtreemfs::Options **)&jarg1; 
  result = (int) ((arg1)->readdir_chunk_size);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_OptionsProxy_1enable_1atime_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  xtreemfs::Options *arg1 = (xtreemfs::Options *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xtreemfs::Options **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->enable_atime = arg2;
}


SWIGEXPORT jboolean JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_OptionsProxy_1enable_1atime_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  xtreemfs::Options *arg1 = (xtreemfs::Options *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xtreemfs::Options **)&jarg1; 
  result = (bool) ((arg1)->enable_atime);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_OptionsProxy_1max_1tries_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  xtreemfs::Options *arg1 = (xtreemfs::Options *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xtreemfs::Options **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->max_tries = arg2;
}


SWIGEXPORT jint JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_OptionsProxy_1max_1tries_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  xtreemfs::Options *arg1 = (xtreemfs::Options *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xtreemfs::Options **)&jarg1; 
  result = (int) ((arg1)->max_tries);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_OptionsProxy_1max_1read_1tries_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  xtreemfs::Options *arg1 = (xtreemfs::Options *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xtreemfs::Options **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->max_read_tries = arg2;
}


SWIGEXPORT jint JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_OptionsProxy_1max_1read_1tries_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  xtreemfs::Options *arg1 = (xtreemfs::Options *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xtreemfs::Options **)&jarg1; 
  result = (int) ((arg1)->max_read_tries);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_OptionsProxy_1max_1write_1tries_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  xtreemfs::Options *arg1 = (xtreemfs::Options *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xtreemfs::Options **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->max_write_tries = arg2;
}


SWIGEXPORT jint JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_OptionsProxy_1max_1write_1tries_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  xtreemfs::Options *arg1 = (xtreemfs::Options *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xtreemfs::Options **)&jarg1; 
  result = (int) ((arg1)->max_write_tries);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_OptionsProxy_1max_1view_1renewals_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  xtreemfs::Options *arg1 = (xtreemfs::Options *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xtreemfs::Options **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->max_view_renewals = arg2;
}


SWIGEXPORT jint JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_OptionsProxy_1max_1view_1renewals_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  xtreemfs::Options *arg1 = (xtreemfs::Options *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xtreemfs::Options **)&jarg1; 
  result = (int) ((arg1)->max_view_renewals);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_OptionsProxy_1retry_1delay_1s_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  xtreemfs::Options *arg1 = (xtreemfs::Options *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xtreemfs::Options **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->retry_delay_s = arg2;
}


SWIGEXPORT jint JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_OptionsProxy_1retry_1delay_1s_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  xtreemfs::Options *arg1 = (xtreemfs::Options *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xtreemfs::Options **)&jarg1; 
  result = (int) ((arg1)->retry_delay_s);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_OptionsProxy_1connect_1timeout_1s_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  xtreemfs::Options *arg1 = (xtreemfs::Options *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xtreemfs::Options **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->connect_timeout_s = arg2;
}


SWIGEXPORT jint JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_OptionsProxy_1connect_1timeout_1s_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  xtreemfs::Options *arg1 = (xtreemfs::Options *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xtreemfs::Options **)&jarg1; 
  result = (int32_t) ((arg1)->connect_timeout_s);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_OptionsProxy_1request_1timeout_1s_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  xtreemfs::Options *arg1 = (xtreemfs::Options *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xtreemfs::Options **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->request_timeout_s = arg2;
}


SWIGEXPORT jint JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_OptionsProxy_1request_1timeout_1s_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  xtreemfs::Options *arg1 = (xtreemfs::Options *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xtreemfs::Options **)&jarg1; 
  result = (int32_t) ((arg1)->request_timeout_s);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_OptionsProxy_1linger_1timeout_1s_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  xtreemfs::Options *arg1 = (xtreemfs::Options *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xtreemfs::Options **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->linger_timeout_s = arg2;
}


SWIGEXPORT jint JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_OptionsProxy_1linger_1timeout_1s_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  xtreemfs::Options *arg1 = (xtreemfs::Options *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xtreemfs::Options **)&jarg1; 
  result = (int32_t) ((arg1)->linger_timeout_s);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_OptionsProxy_1ssl_1pem_1cert_1path_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  xtreemfs::Options *arg1 = (xtreemfs::Options *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xtreemfs::Options **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->ssl_pem_cert_path = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_OptionsProxy_1ssl_1pem_1cert_1path_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  xtreemfs::Options *arg1 = (xtreemfs::Options *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xtreemfs::Options **)&jarg1; 
  result = (std::string *) & ((arg1)->ssl_pem_cert_path);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_OptionsProxy_1ssl_1pem_1key_1path_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  xtreemfs::Options *arg1 = (xtreemfs::Options *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xtreemfs::Options **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->ssl_pem_key_path = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_OptionsProxy_1ssl_1pem_1key_1path_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  xtreemfs::Options *arg1 = (xtreemfs::Options *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xtreemfs::Options **)&jarg1; 
  result = (std::string *) & ((arg1)->ssl_pem_key_path);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_OptionsProxy_1ssl_1pem_1key_1pass_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  xtreemfs::Options *arg1 = (xtreemfs::Options *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xtreemfs::Options **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->ssl_pem_key_pass = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_OptionsProxy_1ssl_1pem_1key_1pass_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  xtreemfs::Options *arg1 = (xtreemfs::Options *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xtreemfs::Options **)&jarg1; 
  result = (std::string *) & ((arg1)->ssl_pem_key_pass);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_OptionsProxy_1ssl_1pem_1trusted_1certs_1path_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  xtreemfs::Options *arg1 = (xtreemfs::Options *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xtreemfs::Options **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->ssl_pem_trusted_certs_path = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_OptionsProxy_1ssl_1pem_1trusted_1certs_1path_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  xtreemfs::Options *arg1 = (xtreemfs::Options *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xtreemfs::Options **)&jarg1; 
  result = (std::string *) & ((arg1)->ssl_pem_trusted_certs_path);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_OptionsProxy_1ssl_1pkcs12_1path_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  xtreemfs::Options *arg1 = (xtreemfs::Options *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xtreemfs::Options **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->ssl_pkcs12_path = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_OptionsProxy_1ssl_1pkcs12_1path_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  xtreemfs::Options *arg1 = (xtreemfs::Options *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xtreemfs::Options **)&jarg1; 
  result = (std::string *) & ((arg1)->ssl_pkcs12_path);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_OptionsProxy_1ssl_1pkcs12_1pass_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  xtreemfs::Options *arg1 = (xtreemfs::Options *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xtreemfs::Options **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->ssl_pkcs12_pass = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_OptionsProxy_1ssl_1pkcs12_1pass_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  xtreemfs::Options *arg1 = (xtreemfs::Options *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xtreemfs::Options **)&jarg1; 
  result = (std::string *) & ((arg1)->ssl_pkcs12_pass);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_OptionsProxy_1grid_1ssl_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  xtreemfs::Options *arg1 = (xtreemfs::Options *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xtreemfs::Options **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->grid_ssl = arg2;
}


SWIGEXPORT jboolean JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_OptionsProxy_1grid_1ssl_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  xtreemfs::Options *arg1 = (xtreemfs::Options *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xtreemfs::Options **)&jarg1; 
  result = (bool) ((arg1)->grid_ssl);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_OptionsProxy_1ssl_1verify_1certificates_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  xtreemfs::Options *arg1 = (xtreemfs::Options *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xtreemfs::Options **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->ssl_verify_certificates = arg2;
}


SWIGEXPORT jboolean JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_OptionsProxy_1ssl_1verify_1certificates_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  xtreemfs::Options *arg1 = (xtreemfs::Options *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xtreemfs::Options **)&jarg1; 
  result = (bool) ((arg1)->ssl_verify_certificates);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_OptionsProxy_1ssl_1ignore_1verify_1errors_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  xtreemfs::Options *arg1 = (xtreemfs::Options *) 0 ;
  std::vector< int > *arg2 = (std::vector< int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(xtreemfs::Options **)&jarg1; 
  arg2 = *(std::vector< int > **)&jarg2; 
  if (arg1) (arg1)->ssl_ignore_verify_errors = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_OptionsProxy_1ssl_1ignore_1verify_1errors_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  xtreemfs::Options *arg1 = (xtreemfs::Options *) 0 ;
  std::vector< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xtreemfs::Options **)&jarg1; 
  result = (std::vector< int > *)& ((arg1)->ssl_ignore_verify_errors);
  *(std::vector< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_OptionsProxy_1ssl_1method_1string_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  xtreemfs::Options *arg1 = (xtreemfs::Options *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xtreemfs::Options **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->ssl_method_string = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_OptionsProxy_1ssl_1method_1string_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  xtreemfs::Options *arg1 = (xtreemfs::Options *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xtreemfs::Options **)&jarg1; 
  result = (std::string *) & ((arg1)->ssl_method_string);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_OptionsProxy_1grid_1auth_1mode_1globus_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  xtreemfs::Options *arg1 = (xtreemfs::Options *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xtreemfs::Options **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->grid_auth_mode_globus = arg2;
}


SWIGEXPORT jboolean JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_OptionsProxy_1grid_1auth_1mode_1globus_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  xtreemfs::Options *arg1 = (xtreemfs::Options *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xtreemfs::Options **)&jarg1; 
  result = (bool) ((arg1)->grid_auth_mode_globus);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_OptionsProxy_1grid_1auth_1mode_1unicore_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  xtreemfs::Options *arg1 = (xtreemfs::Options *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xtreemfs::Options **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->grid_auth_mode_unicore = arg2;
}


SWIGEXPORT jboolean JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_OptionsProxy_1grid_1auth_1mode_1unicore_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  xtreemfs::Options *arg1 = (xtreemfs::Options *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xtreemfs::Options **)&jarg1; 
  result = (bool) ((arg1)->grid_auth_mode_unicore);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_OptionsProxy_1grid_1gridmap_1location_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  xtreemfs::Options *arg1 = (xtreemfs::Options *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xtreemfs::Options **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->grid_gridmap_location = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_OptionsProxy_1grid_1gridmap_1location_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  xtreemfs::Options *arg1 = (xtreemfs::Options *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xtreemfs::Options **)&jarg1; 
  result = (std::string *) & ((arg1)->grid_gridmap_location);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_OptionsProxy_1grid_1gridmap_1location_1default_1globus_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  xtreemfs::Options *arg1 = (xtreemfs::Options *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xtreemfs::Options **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->grid_gridmap_location_default_globus = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_OptionsProxy_1grid_1gridmap_1location_1default_1globus_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  xtreemfs::Options *arg1 = (xtreemfs::Options *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xtreemfs::Options **)&jarg1; 
  result = (std::string *) & ((arg1)->grid_gridmap_location_default_globus);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_OptionsProxy_1grid_1gridmap_1location_1default_1unicore_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  xtreemfs::Options *arg1 = (xtreemfs::Options *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xtreemfs::Options **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->grid_gridmap_location_default_unicore = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_OptionsProxy_1grid_1gridmap_1location_1default_1unicore_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  xtreemfs::Options *arg1 = (xtreemfs::Options *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xtreemfs::Options **)&jarg1; 
  result = (std::string *) & ((arg1)->grid_gridmap_location_default_unicore);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_OptionsProxy_1grid_1gridmap_1reload_1interval_1m_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  xtreemfs::Options *arg1 = (xtreemfs::Options *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xtreemfs::Options **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->grid_gridmap_reload_interval_m = arg2;
}


SWIGEXPORT jint JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_OptionsProxy_1grid_1gridmap_1reload_1interval_1m_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  xtreemfs::Options *arg1 = (xtreemfs::Options *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xtreemfs::Options **)&jarg1; 
  result = (int) ((arg1)->grid_gridmap_reload_interval_m);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_OptionsProxy_1vivaldi_1enable_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  xtreemfs::Options *arg1 = (xtreemfs::Options *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xtreemfs::Options **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->vivaldi_enable = arg2;
}


SWIGEXPORT jboolean JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_OptionsProxy_1vivaldi_1enable_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  xtreemfs::Options *arg1 = (xtreemfs::Options *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xtreemfs::Options **)&jarg1; 
  result = (bool) ((arg1)->vivaldi_enable);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_OptionsProxy_1vivaldi_1enable_1dir_1updates_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  xtreemfs::Options *arg1 = (xtreemfs::Options *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xtreemfs::Options **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->vivaldi_enable_dir_updates = arg2;
}


SWIGEXPORT jboolean JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_OptionsProxy_1vivaldi_1enable_1dir_1updates_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  xtreemfs::Options *arg1 = (xtreemfs::Options *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xtreemfs::Options **)&jarg1; 
  result = (bool) ((arg1)->vivaldi_enable_dir_updates);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_OptionsProxy_1vivaldi_1filename_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  xtreemfs::Options *arg1 = (xtreemfs::Options *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xtreemfs::Options **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->vivaldi_filename = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_OptionsProxy_1vivaldi_1filename_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  xtreemfs::Options *arg1 = (xtreemfs::Options *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xtreemfs::Options **)&jarg1; 
  result = (std::string *) & ((arg1)->vivaldi_filename);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_OptionsProxy_1vivaldi_1recalculation_1interval_1s_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  xtreemfs::Options *arg1 = (xtreemfs::Options *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xtreemfs::Options **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->vivaldi_recalculation_interval_s = arg2;
}


SWIGEXPORT jint JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_OptionsProxy_1vivaldi_1recalculation_1interval_1s_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  xtreemfs::Options *arg1 = (xtreemfs::Options *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xtreemfs::Options **)&jarg1; 
  result = (int) ((arg1)->vivaldi_recalculation_interval_s);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_OptionsProxy_1vivaldi_1recalculation_1epsilon_1s_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  xtreemfs::Options *arg1 = (xtreemfs::Options *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xtreemfs::Options **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->vivaldi_recalculation_epsilon_s = arg2;
}


SWIGEXPORT jint JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_OptionsProxy_1vivaldi_1recalculation_1epsilon_1s_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  xtreemfs::Options *arg1 = (xtreemfs::Options *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xtreemfs::Options **)&jarg1; 
  result = (int) ((arg1)->vivaldi_recalculation_epsilon_s);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_OptionsProxy_1vivaldi_1max_1iterations_1before_1updating_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  xtreemfs::Options *arg1 = (xtreemfs::Options *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xtreemfs::Options **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->vivaldi_max_iterations_before_updating = arg2;
}


SWIGEXPORT jint JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_OptionsProxy_1vivaldi_1max_1iterations_1before_1updating_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  xtreemfs::Options *arg1 = (xtreemfs::Options *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xtreemfs::Options **)&jarg1; 
  result = (int) ((arg1)->vivaldi_max_iterations_before_updating);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_OptionsProxy_1vivaldi_1max_1request_1retries_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  xtreemfs::Options *arg1 = (xtreemfs::Options *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xtreemfs::Options **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->vivaldi_max_request_retries = arg2;
}


SWIGEXPORT jint JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_OptionsProxy_1vivaldi_1max_1request_1retries_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  xtreemfs::Options *arg1 = (xtreemfs::Options *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xtreemfs::Options **)&jarg1; 
  result = (int) ((arg1)->vivaldi_max_request_retries);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_OptionsProxy_1periodic_1file_1size_1updates_1interval_1s_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  xtreemfs::Options *arg1 = (xtreemfs::Options *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xtreemfs::Options **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->periodic_file_size_updates_interval_s = arg2;
}


SWIGEXPORT jint JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_OptionsProxy_1periodic_1file_1size_1updates_1interval_1s_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  xtreemfs::Options *arg1 = (xtreemfs::Options *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xtreemfs::Options **)&jarg1; 
  result = (int) ((arg1)->periodic_file_size_updates_interval_s);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_OptionsProxy_1periodic_1xcap_1renewal_1interval_1s_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  xtreemfs::Options *arg1 = (xtreemfs::Options *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xtreemfs::Options **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->periodic_xcap_renewal_interval_s = arg2;
}


SWIGEXPORT jint JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_OptionsProxy_1periodic_1xcap_1renewal_1interval_1s_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  xtreemfs::Options *arg1 = (xtreemfs::Options *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xtreemfs::Options **)&jarg1; 
  result = (int) ((arg1)->periodic_xcap_renewal_interval_s);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_OptionsProxy_1vivaldi_1zipf_1generator_1skew_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  xtreemfs::Options *arg1 = (xtreemfs::Options *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xtreemfs::Options **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->vivaldi_zipf_generator_skew = arg2;
}


SWIGEXPORT jdouble JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_OptionsProxy_1vivaldi_1zipf_1generator_1skew_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  xtreemfs::Options *arg1 = (xtreemfs::Options *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xtreemfs::Options **)&jarg1; 
  result = (double) ((arg1)->vivaldi_zipf_generator_skew);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_OptionsProxy_1xLoc_1install_1poll_1interval_1s_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  xtreemfs::Options *arg1 = (xtreemfs::Options *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xtreemfs::Options **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->xLoc_install_poll_interval_s = arg2;
}


SWIGEXPORT jint JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_OptionsProxy_1xLoc_1install_1poll_1interval_1s_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  xtreemfs::Options *arg1 = (xtreemfs::Options *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xtreemfs::Options **)&jarg1; 
  result = (int) ((arg1)->xLoc_install_poll_interval_s);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_OptionsProxy_1alternative_1options_1list_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  xtreemfs::Options *arg1 = (xtreemfs::Options *) 0 ;
  std::vector< std::string > *arg2 = (std::vector< std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(xtreemfs::Options **)&jarg1; 
  arg2 = *(std::vector< std::string > **)&jarg2; 
  if (arg1) (arg1)->alternative_options_list = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_OptionsProxy_1alternative_1options_1list_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  xtreemfs::Options *arg1 = (xtreemfs::Options *) 0 ;
  std::vector< std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xtreemfs::Options **)&jarg1; 
  result = (std::vector< std::string > *)& ((arg1)->alternative_options_list);
  *(std::vector< std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_OptionsProxy_1additional_1user_1mapping_1type_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  xtreemfs::Options *arg1 = (xtreemfs::Options *) 0 ;
  xtreemfs::UserMapping::UserMappingType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xtreemfs::Options **)&jarg1; 
  arg2 = (xtreemfs::UserMapping::UserMappingType)jarg2; 
  if (arg1) (arg1)->additional_user_mapping_type = arg2;
}


SWIGEXPORT jint JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_OptionsProxy_1additional_1user_1mapping_1type_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  xtreemfs::Options *arg1 = (xtreemfs::Options *) 0 ;
  xtreemfs::UserMapping::UserMappingType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xtreemfs::Options **)&jarg1; 
  result = (xtreemfs::UserMapping::UserMappingType) ((arg1)->additional_user_mapping_type);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_new_1SSLOptionsProxy(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jstring jarg3, jstring jarg4, jstring jarg5, jstring jarg6, jint jarg7, jboolean jarg8, jboolean jarg9, jlong jarg10, jobject jarg10_, jstring jarg11) {
  jlong jresult = 0 ;
  std::string arg1 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  std::string arg5 ;
  std::string arg6 ;
  boost::asio::ssl::context::file_format arg7 ;
  bool arg8 ;
  bool arg9 ;
  std::vector< int > arg10 ;
  std::string arg11 ;
  std::vector< int > const *argp10 ;
  xtreemfs::rpc::SSLOptions *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg10_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  (&arg4)->assign(arg4_pstr);
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg5_pstr = (const char *)jenv->GetStringUTFChars(jarg5, 0); 
  if (!arg5_pstr) return 0;
  (&arg5)->assign(arg5_pstr);
  jenv->ReleaseStringUTFChars(jarg5, arg5_pstr); 
  if(!jarg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg6_pstr = (const char *)jenv->GetStringUTFChars(jarg6, 0); 
  if (!arg6_pstr) return 0;
  (&arg6)->assign(arg6_pstr);
  jenv->ReleaseStringUTFChars(jarg6, arg6_pstr); 
  arg7 = (boost::asio::ssl::context::file_format)jarg7; 
  arg8 = jarg8 ? true : false; 
  arg9 = jarg9 ? true : false; 
  argp10 = *(std::vector< int > **)&jarg10; 
  if (!argp10) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< int > const");
    return 0;
  }
  arg10 = *argp10; 
  if(!jarg11) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg11_pstr = (const char *)jenv->GetStringUTFChars(jarg11, 0); 
  if (!arg11_pstr) return 0;
  (&arg11)->assign(arg11_pstr);
  jenv->ReleaseStringUTFChars(jarg11, arg11_pstr); 
  result = (xtreemfs::rpc::SSLOptions *)new xtreemfs::rpc::SSLOptions(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11);
  *(xtreemfs::rpc::SSLOptions **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_delete_1SSLOptionsProxy(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  xtreemfs::rpc::SSLOptions *arg1 = (xtreemfs::rpc::SSLOptions *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(xtreemfs::rpc::SSLOptions **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jstring JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_SSLOptionsProxy_1pem_1file_1name(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  xtreemfs::rpc::SSLOptions *arg1 = (xtreemfs::rpc::SSLOptions *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xtreemfs::rpc::SSLOptions **)&jarg1; 
  result = ((xtreemfs::rpc::SSLOptions const *)arg1)->pem_file_name();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_SSLOptionsProxy_1pem_1cert_1name(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  xtreemfs::rpc::SSLOptions *arg1 = (xtreemfs::rpc::SSLOptions *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xtreemfs::rpc::SSLOptions **)&jarg1; 
  result = ((xtreemfs::rpc::SSLOptions const *)arg1)->pem_cert_name();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_SSLOptionsProxy_1pem_1file_1password(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  xtreemfs::rpc::SSLOptions *arg1 = (xtreemfs::rpc::SSLOptions *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xtreemfs::rpc::SSLOptions **)&jarg1; 
  result = ((xtreemfs::rpc::SSLOptions const *)arg1)->pem_file_password();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_SSLOptionsProxy_1pem_1trusted_1certs_1file_1name(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  xtreemfs::rpc::SSLOptions *arg1 = (xtreemfs::rpc::SSLOptions *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xtreemfs::rpc::SSLOptions **)&jarg1; 
  result = ((xtreemfs::rpc::SSLOptions const *)arg1)->pem_trusted_certs_file_name();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_SSLOptionsProxy_1pkcs12_1file_1name(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  xtreemfs::rpc::SSLOptions *arg1 = (xtreemfs::rpc::SSLOptions *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xtreemfs::rpc::SSLOptions **)&jarg1; 
  result = ((xtreemfs::rpc::SSLOptions const *)arg1)->pkcs12_file_name();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_SSLOptionsProxy_1pkcs12_1file_1password(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  xtreemfs::rpc::SSLOptions *arg1 = (xtreemfs::rpc::SSLOptions *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xtreemfs::rpc::SSLOptions **)&jarg1; 
  result = ((xtreemfs::rpc::SSLOptions const *)arg1)->pkcs12_file_password();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_SSLOptionsProxy_1cert_1format(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  xtreemfs::rpc::SSLOptions *arg1 = (xtreemfs::rpc::SSLOptions *) 0 ;
  boost::asio::ssl::context::file_format result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xtreemfs::rpc::SSLOptions **)&jarg1; 
  result = (boost::asio::ssl::context::file_format)((xtreemfs::rpc::SSLOptions const *)arg1)->cert_format();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_SSLOptionsProxy_1use_1grid_1ssl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  xtreemfs::rpc::SSLOptions *arg1 = (xtreemfs::rpc::SSLOptions *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xtreemfs::rpc::SSLOptions **)&jarg1; 
  result = (bool)((xtreemfs::rpc::SSLOptions const *)arg1)->use_grid_ssl();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_SSLOptionsProxy_1verify_1certificates(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  xtreemfs::rpc::SSLOptions *arg1 = (xtreemfs::rpc::SSLOptions *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xtreemfs::rpc::SSLOptions **)&jarg1; 
  result = (bool)((xtreemfs::rpc::SSLOptions const *)arg1)->verify_certificates();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_SSLOptionsProxy_1ignore_1verify_1error(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  xtreemfs::rpc::SSLOptions *arg1 = (xtreemfs::rpc::SSLOptions *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xtreemfs::rpc::SSLOptions **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)((xtreemfs::rpc::SSLOptions const *)arg1)->ignore_verify_error(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_SSLOptionsProxy_1ssl_1method_1string(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  xtreemfs::rpc::SSLOptions *arg1 = (xtreemfs::rpc::SSLOptions *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xtreemfs::rpc::SSLOptions **)&jarg1; 
  result = ((xtreemfs::rpc::SSLOptions const *)arg1)->ssl_method_string();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_initialize_1logger_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jint jarg1) {
  xtreemfs::util::LogLevel arg1 ;
  
  (void)jenv;
  (void)jcls;
  {
    arg1 = static_cast<xtreemfs::util::LogLevel>(jarg1);
  }
  xtreemfs::util::initialize_logger(arg1);
}


SWIGEXPORT void JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_delete_1UUIDResolverProxy(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  xtreemfs::UUIDResolver *arg1 = (xtreemfs::UUIDResolver *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(xtreemfs::UUIDResolver **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_UUIDResolverProxy_1uUIDToAddress(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jobjectArray jarg3) {
  xtreemfs::UUIDResolver *arg1 = (xtreemfs::UUIDResolver *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = (std::string *) 0 ;
  std::string temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xtreemfs::UUIDResolver **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    if (!jarg3) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return ;
    }
    if (jenv->GetArrayLength(jarg3) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return ;
    }
    arg3 = &temp3; 
  }
  try {
    (arg1)->UUIDToAddress((std::string const &)*arg2,arg3);
  }
  catch(xtreemfs::AddressToUUIDNotFoundException const &_e) {
    {
      jclass clazz =  jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/AddressToUUIDNotFoundException");
      jenv->ThrowNew(clazz, (&_e)->what());
      return ;
    }
  }
  catch(xtreemfs::UnknownAddressSchemeException const &_e) {
    {
      jclass clazz = jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/XtreemFSException");
      jenv->ThrowNew(clazz, (&_e)->what());
      return ;
    }
  }
  catch(xtreemfs::XtreemFSException const &_e) {
    {
      jclass clazz = jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/XtreemFSException");
      jenv->ThrowNew(clazz, (&_e)->what());
      return ;
    }
  }
  
  {
    jstring jvalue = jenv->NewStringUTF(temp3.c_str()); 
    jenv->SetObjectArrayElement(jarg3, 0, jvalue);
  }
  
}


SWIGEXPORT void JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_UUIDResolverProxy_1volumeNameToMRCUUID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jobjectArray jarg3) {
  xtreemfs::UUIDResolver *arg1 = (xtreemfs::UUIDResolver *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = (std::string *) 0 ;
  std::string temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xtreemfs::UUIDResolver **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    if (!jarg3) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return ;
    }
    if (jenv->GetArrayLength(jarg3) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return ;
    }
    arg3 = &temp3; 
  }
  try {
    (arg1)->VolumeNameToMRCUUID((std::string const &)*arg2,arg3);
  }
  catch(xtreemfs::VolumeNotFoundException const &_e) {
    {
      jclass clazz =  jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/VolumeNotFoundException");
      jenv->ThrowNew(clazz, (&_e)->what());
      return ;
    }
  }
  catch(xtreemfs::AddressToUUIDNotFoundException const &_e) {
    {
      jclass clazz =  jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/AddressToUUIDNotFoundException");
      jenv->ThrowNew(clazz, (&_e)->what());
      return ;
    }
  }
  catch(xtreemfs::XtreemFSException const &_e) {
    {
      jclass clazz = jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/XtreemFSException");
      jenv->ThrowNew(clazz, (&_e)->what());
      return ;
    }
  }
  
  {
    jstring jvalue = jenv->NewStringUTF(temp3.c_str()); 
    jenv->SetObjectArrayElement(jarg3, 0, jvalue);
  }
  
}


SWIGEXPORT jlong JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_UUIDResolverProxy_1volumeNameToMRCUUIDs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  xtreemfs::UUIDResolver *arg1 = (xtreemfs::UUIDResolver *) 0 ;
  std::string *arg2 = 0 ;
  std::vector< std::string > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xtreemfs::UUIDResolver **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  try {
    result = (arg1)->VolumeNameToMRCUUIDs((std::string const &)*arg2);
  }
  catch(xtreemfs::VolumeNotFoundException const &_e) {
    {
      jclass clazz =  jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/VolumeNotFoundException");
      jenv->ThrowNew(clazz, (&_e)->what());
      return 0;
    }
  }
  catch(xtreemfs::AddressToUUIDNotFoundException const &_e) {
    {
      jclass clazz =  jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/AddressToUUIDNotFoundException");
      jenv->ThrowNew(clazz, (&_e)->what());
      return 0;
    }
  }
  catch(xtreemfs::XtreemFSException const &_e) {
    {
      jclass clazz = jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/XtreemFSException");
      jenv->ThrowNew(clazz, (&_e)->what());
      return 0;
    }
  }
  
  *(std::vector< std::string > **)&jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_ClientProxy_1createClient_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  xtreemfs::ServiceAddresses *arg1 = 0 ;
  xtreemfs::pbrpc::UserCredentials *arg2 = 0 ;
  xtreemfs::rpc::SSLOptions *arg3 = (xtreemfs::rpc::SSLOptions *) 0 ;
  xtreemfs::Options *arg4 = 0 ;
  xtreemfs::pbrpc::UserCredentials temp2 ;
  xtreemfs::Client *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(xtreemfs::ServiceAddresses **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "xtreemfs::ServiceAddresses const & reference is null");
    return 0;
  } 
  {
    int proto_size = 0;
    boost::scoped_ptr<char> proto_buffer(
      JNIUtil::MakeCharArray(jenv, jarg2, &proto_size));
    
    bool parsed_ok = temp2.ParseFromArray(proto_buffer.get(), proto_size);
    if (!parsed_ok) {
      SWIG_JavaThrowException(jenv,
        SWIG_JavaRuntimeException,
        "Unable to parse xtreemfs::pbrpc::UserCredentials protocol message.");
    }
    arg2 = &temp2;
  }
  arg3 = *(xtreemfs::rpc::SSLOptions **)&jarg3; 
  arg4 = *(xtreemfs::Options **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "xtreemfs::Options const & reference is null");
    return 0;
  } 
  result = (xtreemfs::Client *)xtreemfs::Client::CreateClient((xtreemfs::ServiceAddresses const &)*arg1,(xtreemfs::pbrpc::UserCredentials const &)*arg2,(xtreemfs::rpc::SSLOptions const *)arg3,(xtreemfs::Options const &)*arg4);
  *(xtreemfs::Client **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_ClientProxy_1createClient_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jint jarg5) {
  jlong jresult = 0 ;
  xtreemfs::ServiceAddresses *arg1 = 0 ;
  xtreemfs::pbrpc::UserCredentials *arg2 = 0 ;
  xtreemfs::rpc::SSLOptions *arg3 = (xtreemfs::rpc::SSLOptions *) 0 ;
  xtreemfs::Options *arg4 = 0 ;
  xtreemfs::Client::ClientImplementationType arg5 ;
  xtreemfs::pbrpc::UserCredentials temp2 ;
  xtreemfs::Client *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(xtreemfs::ServiceAddresses **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "xtreemfs::ServiceAddresses const & reference is null");
    return 0;
  } 
  {
    int proto_size = 0;
    boost::scoped_ptr<char> proto_buffer(
      JNIUtil::MakeCharArray(jenv, jarg2, &proto_size));
    
    bool parsed_ok = temp2.ParseFromArray(proto_buffer.get(), proto_size);
    if (!parsed_ok) {
      SWIG_JavaThrowException(jenv,
        SWIG_JavaRuntimeException,
        "Unable to parse xtreemfs::pbrpc::UserCredentials protocol message.");
    }
    arg2 = &temp2;
  }
  arg3 = *(xtreemfs::rpc::SSLOptions **)&jarg3; 
  arg4 = *(xtreemfs::Options **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "xtreemfs::Options const & reference is null");
    return 0;
  } 
  arg5 = (xtreemfs::Client::ClientImplementationType)jarg5; 
  result = (xtreemfs::Client *)xtreemfs::Client::CreateClient((xtreemfs::ServiceAddresses const &)*arg1,(xtreemfs::pbrpc::UserCredentials const &)*arg2,(xtreemfs::rpc::SSLOptions const *)arg3,(xtreemfs::Options const &)*arg4,arg5);
  *(xtreemfs::Client **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_delete_1ClientProxy(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  xtreemfs::Client *arg1 = (xtreemfs::Client *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(xtreemfs::Client **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_ClientProxy_1start(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  xtreemfs::Client *arg1 = (xtreemfs::Client *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xtreemfs::Client **)&jarg1; 
  try {
    (arg1)->Start();
  }
  catch(xtreemfs::XtreemFSException const &_e) {
    {
      jclass clazz = jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/XtreemFSException");
      jenv->ThrowNew(clazz, (&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_ClientProxy_1shutdown(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  xtreemfs::Client *arg1 = (xtreemfs::Client *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xtreemfs::Client **)&jarg1; 
  (arg1)->Shutdown();
}


SWIGEXPORT jlong JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_ClientProxy_1openVolumeProxy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  xtreemfs::Client *arg1 = (xtreemfs::Client *) 0 ;
  std::string *arg2 = 0 ;
  xtreemfs::rpc::SSLOptions *arg3 = (xtreemfs::rpc::SSLOptions *) 0 ;
  xtreemfs::Options *arg4 = 0 ;
  xtreemfs::Volume *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(xtreemfs::Client **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(xtreemfs::rpc::SSLOptions **)&jarg3; 
  arg4 = *(xtreemfs::Options **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "xtreemfs::Options const & reference is null");
    return 0;
  } 
  try {
    result = (xtreemfs::Volume *)(arg1)->OpenVolume((std::string const &)*arg2,(xtreemfs::rpc::SSLOptions const *)arg3,(xtreemfs::Options const &)*arg4);
  }
  catch(xtreemfs::AddressToUUIDNotFoundException const &_e) {
    {
      jclass clazz =  jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/AddressToUUIDNotFoundException");
      jenv->ThrowNew(clazz, (&_e)->what());
      return 0;
    }
  }
  catch(xtreemfs::UnknownAddressSchemeException const &_e) {
    {
      jclass clazz = jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/XtreemFSException");
      jenv->ThrowNew(clazz, (&_e)->what());
      return 0;
    }
  }
  catch(xtreemfs::VolumeNotFoundException const &_e) {
    {
      jclass clazz =  jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/VolumeNotFoundException");
      jenv->ThrowNew(clazz, (&_e)->what());
      return 0;
    }
  }
  catch(xtreemfs::XtreemFSException const &_e) {
    {
      jclass clazz = jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/XtreemFSException");
      jenv->ThrowNew(clazz, (&_e)->what());
      return 0;
    }
  }
  
  *(xtreemfs::Volume **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_ClientProxy_1createVolume_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jbyteArray jarg3, jbyteArray jarg4, jstring jarg5) {
  xtreemfs::Client *arg1 = (xtreemfs::Client *) 0 ;
  xtreemfs::ServiceAddresses *arg2 = 0 ;
  xtreemfs::pbrpc::Auth *arg3 = 0 ;
  xtreemfs::pbrpc::UserCredentials *arg4 = 0 ;
  std::string *arg5 = 0 ;
  xtreemfs::pbrpc::Auth temp3 ;
  xtreemfs::pbrpc::UserCredentials temp4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(xtreemfs::Client **)&jarg1; 
  arg2 = *(xtreemfs::ServiceAddresses **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "xtreemfs::ServiceAddresses const & reference is null");
    return ;
  } 
  {
    int proto_size = 0;
    boost::scoped_ptr<char> proto_buffer(
      JNIUtil::MakeCharArray(jenv, jarg3, &proto_size));
    
    bool parsed_ok = temp3.ParseFromArray(proto_buffer.get(), proto_size);
    if (!parsed_ok) {
      SWIG_JavaThrowException(jenv,
        SWIG_JavaRuntimeException,
        "Unable to parse xtreemfs::pbrpc::Auth protocol message.");
    }
    arg3 = &temp3;
  }
  {
    int proto_size = 0;
    boost::scoped_ptr<char> proto_buffer(
      JNIUtil::MakeCharArray(jenv, jarg4, &proto_size));
    
    bool parsed_ok = temp4.ParseFromArray(proto_buffer.get(), proto_size);
    if (!parsed_ok) {
      SWIG_JavaThrowException(jenv,
        SWIG_JavaRuntimeException,
        "Unable to parse xtreemfs::pbrpc::UserCredentials protocol message.");
    }
    arg4 = &temp4;
  }
  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg5_pstr = (const char *)jenv->GetStringUTFChars(jarg5, 0); 
  if (!arg5_pstr) return ;
  std::string arg5_str(arg5_pstr);
  arg5 = &arg5_str;
  jenv->ReleaseStringUTFChars(jarg5, arg5_pstr); 
  try {
    (arg1)->CreateVolume((xtreemfs::ServiceAddresses const &)*arg2,(xtreemfs::pbrpc::Auth const &)*arg3,(xtreemfs::pbrpc::UserCredentials const &)*arg4,(std::string const &)*arg5);
  }
  catch(xtreemfs::IOException const &_e) {
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaIOException, (&_e)->what());
      return ;
    }
  }
  catch(xtreemfs::PosixErrorException const &_e) {
    {
      jclass clazz = jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/PosixErrorException");
      jmethodID mid = jenv->GetMethodID(clazz, "<init>", "(Lorg/xtreemfs/foundation/pbrpc/generatedinterfaces/RPC$POSIXErrno;Ljava/lang/String;)V");
      
      jclass clazz2 = jenv->FindClass("org/xtreemfs/foundation/pbrpc/generatedinterfaces/RPC$POSIXErrno");
      jmethodID mid2 = jenv->GetStaticMethodID(clazz2, "valueOf", "(I)Lorg/xtreemfs/foundation/pbrpc/generatedinterfaces/RPC$POSIXErrno;");
      
      jobject posix_errno = jenv->CallStaticObjectMethod(clazz2, mid2, (&_e)->posix_errno());
      jstring what = jenv->NewStringUTF((&_e)->what());
      jthrowable o = static_cast<jthrowable>(jenv->NewObject(clazz, mid, posix_errno, what));
      jenv->Throw(o);
      
      return ;
    }
  }
  catch(xtreemfs::XtreemFSException const &_e) {
    {
      jclass clazz = jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/XtreemFSException");
      jenv->ThrowNew(clazz, (&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_ClientProxy_1createVolume_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jbyteArray jarg3, jbyteArray jarg4, jstring jarg5, jint jarg6, jstring jarg7, jstring jarg8, jint jarg9, jint jarg10, jint jarg11, jint jarg12, jint jarg13, jlong jarg14, jobject jarg14_) {
  xtreemfs::Client *arg1 = (xtreemfs::Client *) 0 ;
  xtreemfs::ServiceAddresses *arg2 = 0 ;
  xtreemfs::pbrpc::Auth *arg3 = 0 ;
  xtreemfs::pbrpc::UserCredentials *arg4 = 0 ;
  std::string *arg5 = 0 ;
  int arg6 ;
  std::string *arg7 = 0 ;
  std::string *arg8 = 0 ;
  xtreemfs::pbrpc::AccessControlPolicyType *arg9 = 0 ;
  long arg10 ;
  xtreemfs::pbrpc::StripingPolicyType *arg11 = 0 ;
  int arg12 ;
  int arg13 ;
  std::map< std::string,std::string > *arg14 = 0 ;
  xtreemfs::pbrpc::Auth temp3 ;
  xtreemfs::pbrpc::UserCredentials temp4 ;
  xtreemfs::pbrpc::AccessControlPolicyType temp9 ;
  xtreemfs::pbrpc::StripingPolicyType temp11 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg14_;
  arg1 = *(xtreemfs::Client **)&jarg1; 
  arg2 = *(xtreemfs::ServiceAddresses **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "xtreemfs::ServiceAddresses const & reference is null");
    return ;
  } 
  {
    int proto_size = 0;
    boost::scoped_ptr<char> proto_buffer(
      JNIUtil::MakeCharArray(jenv, jarg3, &proto_size));
    
    bool parsed_ok = temp3.ParseFromArray(proto_buffer.get(), proto_size);
    if (!parsed_ok) {
      SWIG_JavaThrowException(jenv,
        SWIG_JavaRuntimeException,
        "Unable to parse xtreemfs::pbrpc::Auth protocol message.");
    }
    arg3 = &temp3;
  }
  {
    int proto_size = 0;
    boost::scoped_ptr<char> proto_buffer(
      JNIUtil::MakeCharArray(jenv, jarg4, &proto_size));
    
    bool parsed_ok = temp4.ParseFromArray(proto_buffer.get(), proto_size);
    if (!parsed_ok) {
      SWIG_JavaThrowException(jenv,
        SWIG_JavaRuntimeException,
        "Unable to parse xtreemfs::pbrpc::UserCredentials protocol message.");
    }
    arg4 = &temp4;
  }
  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg5_pstr = (const char *)jenv->GetStringUTFChars(jarg5, 0); 
  if (!arg5_pstr) return ;
  std::string arg5_str(arg5_pstr);
  arg5 = &arg5_str;
  jenv->ReleaseStringUTFChars(jarg5, arg5_pstr); 
  arg6 = (int)jarg6; 
  if(!jarg7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg7_pstr = (const char *)jenv->GetStringUTFChars(jarg7, 0); 
  if (!arg7_pstr) return ;
  std::string arg7_str(arg7_pstr);
  arg7 = &arg7_str;
  jenv->ReleaseStringUTFChars(jarg7, arg7_pstr); 
  if(!jarg8) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg8_pstr = (const char *)jenv->GetStringUTFChars(jarg8, 0); 
  if (!arg8_pstr) return ;
  std::string arg8_str(arg8_pstr);
  arg8 = &arg8_str;
  jenv->ReleaseStringUTFChars(jarg8, arg8_pstr); 
  {
    if (! xtreemfs::pbrpc::AccessControlPolicyType_IsValid(jarg9)) {
      SWIG_JavaThrowException(jenv,
        SWIG_JavaRuntimeException,
        "Unable to parse xtreemfs::pbrpc::AccessControlPolicyType enum.");
    }
    temp9 = static_cast<xtreemfs::pbrpc::AccessControlPolicyType>(jarg9);
    arg9 = &temp9;
  }
  arg10 = (long)jarg10; 
  {
    if (! xtreemfs::pbrpc::StripingPolicyType_IsValid(jarg11)) {
      SWIG_JavaThrowException(jenv,
        SWIG_JavaRuntimeException,
        "Unable to parse xtreemfs::pbrpc::StripingPolicyType enum.");
    }
    temp11 = static_cast<xtreemfs::pbrpc::StripingPolicyType>(jarg11);
    arg11 = &temp11;
  }
  arg12 = (int)jarg12; 
  arg13 = (int)jarg13; 
  arg14 = *(std::map< std::string,std::string > **)&jarg14;
  if (!arg14) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::map< std::string,std::string > const & reference is null");
    return ;
  } 
  try {
    (arg1)->CreateVolume((xtreemfs::ServiceAddresses const &)*arg2,(xtreemfs::pbrpc::Auth const &)*arg3,(xtreemfs::pbrpc::UserCredentials const &)*arg4,(std::string const &)*arg5,arg6,(std::string const &)*arg7,(std::string const &)*arg8,(xtreemfs::pbrpc::AccessControlPolicyType const &)*arg9,arg10,(xtreemfs::pbrpc::StripingPolicyType const &)*arg11,arg12,arg13,(std::map< std::string,std::string > const &)*arg14);
  }
  catch(xtreemfs::IOException const &_e) {
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaIOException, (&_e)->what());
      return ;
    }
  }
  catch(xtreemfs::PosixErrorException const &_e) {
    {
      jclass clazz = jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/PosixErrorException");
      jmethodID mid = jenv->GetMethodID(clazz, "<init>", "(Lorg/xtreemfs/foundation/pbrpc/generatedinterfaces/RPC$POSIXErrno;Ljava/lang/String;)V");
      
      jclass clazz2 = jenv->FindClass("org/xtreemfs/foundation/pbrpc/generatedinterfaces/RPC$POSIXErrno");
      jmethodID mid2 = jenv->GetStaticMethodID(clazz2, "valueOf", "(I)Lorg/xtreemfs/foundation/pbrpc/generatedinterfaces/RPC$POSIXErrno;");
      
      jobject posix_errno = jenv->CallStaticObjectMethod(clazz2, mid2, (&_e)->posix_errno());
      jstring what = jenv->NewStringUTF((&_e)->what());
      jthrowable o = static_cast<jthrowable>(jenv->NewObject(clazz, mid, posix_errno, what));
      jenv->Throw(o);
      
      return ;
    }
  }
  catch(xtreemfs::XtreemFSException const &_e) {
    {
      jclass clazz = jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/XtreemFSException");
      jenv->ThrowNew(clazz, (&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_ClientProxy_1createVolume_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2, jbyteArray jarg3, jstring jarg4, jint jarg5, jstring jarg6, jstring jarg7, jint jarg8, jint jarg9, jint jarg10, jint jarg11, jint jarg12, jlong jarg13, jobject jarg13_) {
  xtreemfs::Client *arg1 = (xtreemfs::Client *) 0 ;
  xtreemfs::pbrpc::Auth *arg2 = 0 ;
  xtreemfs::pbrpc::UserCredentials *arg3 = 0 ;
  std::string *arg4 = 0 ;
  int arg5 ;
  std::string *arg6 = 0 ;
  std::string *arg7 = 0 ;
  xtreemfs::pbrpc::AccessControlPolicyType *arg8 = 0 ;
  long arg9 ;
  xtreemfs::pbrpc::StripingPolicyType *arg10 = 0 ;
  int arg11 ;
  int arg12 ;
  std::map< std::string,std::string > *arg13 = 0 ;
  xtreemfs::pbrpc::Auth temp2 ;
  xtreemfs::pbrpc::UserCredentials temp3 ;
  xtreemfs::pbrpc::AccessControlPolicyType temp8 ;
  xtreemfs::pbrpc::StripingPolicyType temp10 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg13_;
  arg1 = *(xtreemfs::Client **)&jarg1; 
  {
    int proto_size = 0;
    boost::scoped_ptr<char> proto_buffer(
      JNIUtil::MakeCharArray(jenv, jarg2, &proto_size));
    
    bool parsed_ok = temp2.ParseFromArray(proto_buffer.get(), proto_size);
    if (!parsed_ok) {
      SWIG_JavaThrowException(jenv,
        SWIG_JavaRuntimeException,
        "Unable to parse xtreemfs::pbrpc::Auth protocol message.");
    }
    arg2 = &temp2;
  }
  {
    int proto_size = 0;
    boost::scoped_ptr<char> proto_buffer(
      JNIUtil::MakeCharArray(jenv, jarg3, &proto_size));
    
    bool parsed_ok = temp3.ParseFromArray(proto_buffer.get(), proto_size);
    if (!parsed_ok) {
      SWIG_JavaThrowException(jenv,
        SWIG_JavaRuntimeException,
        "Unable to parse xtreemfs::pbrpc::UserCredentials protocol message.");
    }
    arg3 = &temp3;
  }
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  arg5 = (int)jarg5; 
  if(!jarg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg6_pstr = (const char *)jenv->GetStringUTFChars(jarg6, 0); 
  if (!arg6_pstr) return ;
  std::string arg6_str(arg6_pstr);
  arg6 = &arg6_str;
  jenv->ReleaseStringUTFChars(jarg6, arg6_pstr); 
  if(!jarg7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg7_pstr = (const char *)jenv->GetStringUTFChars(jarg7, 0); 
  if (!arg7_pstr) return ;
  std::string arg7_str(arg7_pstr);
  arg7 = &arg7_str;
  jenv->ReleaseStringUTFChars(jarg7, arg7_pstr); 
  {
    if (! xtreemfs::pbrpc::AccessControlPolicyType_IsValid(jarg8)) {
      SWIG_JavaThrowException(jenv,
        SWIG_JavaRuntimeException,
        "Unable to parse xtreemfs::pbrpc::AccessControlPolicyType enum.");
    }
    temp8 = static_cast<xtreemfs::pbrpc::AccessControlPolicyType>(jarg8);
    arg8 = &temp8;
  }
  arg9 = (long)jarg9; 
  {
    if (! xtreemfs::pbrpc::StripingPolicyType_IsValid(jarg10)) {
      SWIG_JavaThrowException(jenv,
        SWIG_JavaRuntimeException,
        "Unable to parse xtreemfs::pbrpc::StripingPolicyType enum.");
    }
    temp10 = static_cast<xtreemfs::pbrpc::StripingPolicyType>(jarg10);
    arg10 = &temp10;
  }
  arg11 = (int)jarg11; 
  arg12 = (int)jarg12; 
  arg13 = *(std::map< std::string,std::string > **)&jarg13;
  if (!arg13) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::map< std::string,std::string > const & reference is null");
    return ;
  } 
  try {
    (arg1)->CreateVolume((xtreemfs::pbrpc::Auth const &)*arg2,(xtreemfs::pbrpc::UserCredentials const &)*arg3,(std::string const &)*arg4,arg5,(std::string const &)*arg6,(std::string const &)*arg7,(xtreemfs::pbrpc::AccessControlPolicyType const &)*arg8,arg9,(xtreemfs::pbrpc::StripingPolicyType const &)*arg10,arg11,arg12,(std::map< std::string,std::string > const &)*arg13);
  }
  catch(xtreemfs::IOException const &_e) {
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaIOException, (&_e)->what());
      return ;
    }
  }
  catch(xtreemfs::PosixErrorException const &_e) {
    {
      jclass clazz = jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/PosixErrorException");
      jmethodID mid = jenv->GetMethodID(clazz, "<init>", "(Lorg/xtreemfs/foundation/pbrpc/generatedinterfaces/RPC$POSIXErrno;Ljava/lang/String;)V");
      
      jclass clazz2 = jenv->FindClass("org/xtreemfs/foundation/pbrpc/generatedinterfaces/RPC$POSIXErrno");
      jmethodID mid2 = jenv->GetStaticMethodID(clazz2, "valueOf", "(I)Lorg/xtreemfs/foundation/pbrpc/generatedinterfaces/RPC$POSIXErrno;");
      
      jobject posix_errno = jenv->CallStaticObjectMethod(clazz2, mid2, (&_e)->posix_errno());
      jstring what = jenv->NewStringUTF((&_e)->what());
      jthrowable o = static_cast<jthrowable>(jenv->NewObject(clazz, mid, posix_errno, what));
      jenv->Throw(o);
      
      return ;
    }
  }
  catch(xtreemfs::XtreemFSException const &_e) {
    {
      jclass clazz = jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/XtreemFSException");
      jenv->ThrowNew(clazz, (&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_ClientProxy_1deleteVolume_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jbyteArray jarg3, jbyteArray jarg4, jstring jarg5) {
  xtreemfs::Client *arg1 = (xtreemfs::Client *) 0 ;
  xtreemfs::ServiceAddresses *arg2 = 0 ;
  xtreemfs::pbrpc::Auth *arg3 = 0 ;
  xtreemfs::pbrpc::UserCredentials *arg4 = 0 ;
  std::string *arg5 = 0 ;
  xtreemfs::pbrpc::Auth temp3 ;
  xtreemfs::pbrpc::UserCredentials temp4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(xtreemfs::Client **)&jarg1; 
  arg2 = *(xtreemfs::ServiceAddresses **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "xtreemfs::ServiceAddresses const & reference is null");
    return ;
  } 
  {
    int proto_size = 0;
    boost::scoped_ptr<char> proto_buffer(
      JNIUtil::MakeCharArray(jenv, jarg3, &proto_size));
    
    bool parsed_ok = temp3.ParseFromArray(proto_buffer.get(), proto_size);
    if (!parsed_ok) {
      SWIG_JavaThrowException(jenv,
        SWIG_JavaRuntimeException,
        "Unable to parse xtreemfs::pbrpc::Auth protocol message.");
    }
    arg3 = &temp3;
  }
  {
    int proto_size = 0;
    boost::scoped_ptr<char> proto_buffer(
      JNIUtil::MakeCharArray(jenv, jarg4, &proto_size));
    
    bool parsed_ok = temp4.ParseFromArray(proto_buffer.get(), proto_size);
    if (!parsed_ok) {
      SWIG_JavaThrowException(jenv,
        SWIG_JavaRuntimeException,
        "Unable to parse xtreemfs::pbrpc::UserCredentials protocol message.");
    }
    arg4 = &temp4;
  }
  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg5_pstr = (const char *)jenv->GetStringUTFChars(jarg5, 0); 
  if (!arg5_pstr) return ;
  std::string arg5_str(arg5_pstr);
  arg5 = &arg5_str;
  jenv->ReleaseStringUTFChars(jarg5, arg5_pstr); 
  try {
    (arg1)->DeleteVolume((xtreemfs::ServiceAddresses const &)*arg2,(xtreemfs::pbrpc::Auth const &)*arg3,(xtreemfs::pbrpc::UserCredentials const &)*arg4,(std::string const &)*arg5);
  }
  catch(xtreemfs::IOException const &_e) {
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaIOException, (&_e)->what());
      return ;
    }
  }
  catch(xtreemfs::PosixErrorException const &_e) {
    {
      jclass clazz = jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/PosixErrorException");
      jmethodID mid = jenv->GetMethodID(clazz, "<init>", "(Lorg/xtreemfs/foundation/pbrpc/generatedinterfaces/RPC$POSIXErrno;Ljava/lang/String;)V");
      
      jclass clazz2 = jenv->FindClass("org/xtreemfs/foundation/pbrpc/generatedinterfaces/RPC$POSIXErrno");
      jmethodID mid2 = jenv->GetStaticMethodID(clazz2, "valueOf", "(I)Lorg/xtreemfs/foundation/pbrpc/generatedinterfaces/RPC$POSIXErrno;");
      
      jobject posix_errno = jenv->CallStaticObjectMethod(clazz2, mid2, (&_e)->posix_errno());
      jstring what = jenv->NewStringUTF((&_e)->what());
      jthrowable o = static_cast<jthrowable>(jenv->NewObject(clazz, mid, posix_errno, what));
      jenv->Throw(o);
      
      return ;
    }
  }
  catch(xtreemfs::XtreemFSException const &_e) {
    {
      jclass clazz = jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/XtreemFSException");
      jenv->ThrowNew(clazz, (&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_ClientProxy_1deleteVolume_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2, jbyteArray jarg3, jstring jarg4) {
  xtreemfs::Client *arg1 = (xtreemfs::Client *) 0 ;
  xtreemfs::pbrpc::Auth *arg2 = 0 ;
  xtreemfs::pbrpc::UserCredentials *arg3 = 0 ;
  std::string *arg4 = 0 ;
  xtreemfs::pbrpc::Auth temp2 ;
  xtreemfs::pbrpc::UserCredentials temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xtreemfs::Client **)&jarg1; 
  {
    int proto_size = 0;
    boost::scoped_ptr<char> proto_buffer(
      JNIUtil::MakeCharArray(jenv, jarg2, &proto_size));
    
    bool parsed_ok = temp2.ParseFromArray(proto_buffer.get(), proto_size);
    if (!parsed_ok) {
      SWIG_JavaThrowException(jenv,
        SWIG_JavaRuntimeException,
        "Unable to parse xtreemfs::pbrpc::Auth protocol message.");
    }
    arg2 = &temp2;
  }
  {
    int proto_size = 0;
    boost::scoped_ptr<char> proto_buffer(
      JNIUtil::MakeCharArray(jenv, jarg3, &proto_size));
    
    bool parsed_ok = temp3.ParseFromArray(proto_buffer.get(), proto_size);
    if (!parsed_ok) {
      SWIG_JavaThrowException(jenv,
        SWIG_JavaRuntimeException,
        "Unable to parse xtreemfs::pbrpc::UserCredentials protocol message.");
    }
    arg3 = &temp3;
  }
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  try {
    (arg1)->DeleteVolume((xtreemfs::pbrpc::Auth const &)*arg2,(xtreemfs::pbrpc::UserCredentials const &)*arg3,(std::string const &)*arg4);
  }
  catch(xtreemfs::IOException const &_e) {
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaIOException, (&_e)->what());
      return ;
    }
  }
  catch(xtreemfs::PosixErrorException const &_e) {
    {
      jclass clazz = jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/PosixErrorException");
      jmethodID mid = jenv->GetMethodID(clazz, "<init>", "(Lorg/xtreemfs/foundation/pbrpc/generatedinterfaces/RPC$POSIXErrno;Ljava/lang/String;)V");
      
      jclass clazz2 = jenv->FindClass("org/xtreemfs/foundation/pbrpc/generatedinterfaces/RPC$POSIXErrno");
      jmethodID mid2 = jenv->GetStaticMethodID(clazz2, "valueOf", "(I)Lorg/xtreemfs/foundation/pbrpc/generatedinterfaces/RPC$POSIXErrno;");
      
      jobject posix_errno = jenv->CallStaticObjectMethod(clazz2, mid2, (&_e)->posix_errno());
      jstring what = jenv->NewStringUTF((&_e)->what());
      jthrowable o = static_cast<jthrowable>(jenv->NewObject(clazz, mid, posix_errno, what));
      jenv->Throw(o);
      
      return ;
    }
  }
  catch(xtreemfs::XtreemFSException const &_e) {
    {
      jclass clazz = jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/XtreemFSException");
      jenv->ThrowNew(clazz, (&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT jbyteArray JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_ClientProxy_1listVolumes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jbyteArray jarg3) {
  jbyteArray jresult = 0 ;
  xtreemfs::Client *arg1 = (xtreemfs::Client *) 0 ;
  xtreemfs::ServiceAddresses *arg2 = 0 ;
  xtreemfs::pbrpc::Auth *arg3 = 0 ;
  xtreemfs::pbrpc::Auth temp3 ;
  xtreemfs::pbrpc::Volumes *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(xtreemfs::Client **)&jarg1; 
  arg2 = *(xtreemfs::ServiceAddresses **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "xtreemfs::ServiceAddresses const & reference is null");
    return 0;
  } 
  {
    int proto_size = 0;
    boost::scoped_ptr<char> proto_buffer(
      JNIUtil::MakeCharArray(jenv, jarg3, &proto_size));
    
    bool parsed_ok = temp3.ParseFromArray(proto_buffer.get(), proto_size);
    if (!parsed_ok) {
      SWIG_JavaThrowException(jenv,
        SWIG_JavaRuntimeException,
        "Unable to parse xtreemfs::pbrpc::Auth protocol message.");
    }
    arg3 = &temp3;
  }
  try {
    result = (xtreemfs::pbrpc::Volumes *)(arg1)->ListVolumes((xtreemfs::ServiceAddresses const &)*arg2,(xtreemfs::pbrpc::Auth const &)*arg3);
  }
  catch(xtreemfs::AddressToUUIDNotFoundException const &_e) {
    {
      jclass clazz =  jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/AddressToUUIDNotFoundException");
      jenv->ThrowNew(clazz, (&_e)->what());
      return 0;
    }
  }
  catch(xtreemfs::IOException const &_e) {
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaIOException, (&_e)->what());
      return 0;
    }
  }
  catch(xtreemfs::PosixErrorException const &_e) {
    {
      jclass clazz = jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/PosixErrorException");
      jmethodID mid = jenv->GetMethodID(clazz, "<init>", "(Lorg/xtreemfs/foundation/pbrpc/generatedinterfaces/RPC$POSIXErrno;Ljava/lang/String;)V");
      
      jclass clazz2 = jenv->FindClass("org/xtreemfs/foundation/pbrpc/generatedinterfaces/RPC$POSIXErrno");
      jmethodID mid2 = jenv->GetStaticMethodID(clazz2, "valueOf", "(I)Lorg/xtreemfs/foundation/pbrpc/generatedinterfaces/RPC$POSIXErrno;");
      
      jobject posix_errno = jenv->CallStaticObjectMethod(clazz2, mid2, (&_e)->posix_errno());
      jstring what = jenv->NewStringUTF((&_e)->what());
      jthrowable o = static_cast<jthrowable>(jenv->NewObject(clazz, mid, posix_errno, what));
      jenv->Throw(o);
      
      return 0;
    }
  }
  catch(xtreemfs::XtreemFSException const &_e) {
    {
      jclass clazz = jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/XtreemFSException");
      jenv->ThrowNew(clazz, (&_e)->what());
      return 0;
    }
  }
  
  {
    boost::scoped_ptr<char> buf(new char[result->ByteSize()]);
    
    result->SerializeWithCachedSizesToArray(
      reinterpret_cast<google::protobuf::uint8*>(buf.get()));
    jresult = JNIUtil::MakeJByteArray(jenv, buf.get(), result->ByteSize());
    if (true) {
      // To prevent a memory leak.
      delete result;
      result = NULL;
    }
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_ClientProxy_1listVolumeNames(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  xtreemfs::Client *arg1 = (xtreemfs::Client *) 0 ;
  std::vector< std::string > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xtreemfs::Client **)&jarg1; 
  try {
    result = (arg1)->ListVolumeNames();
  }
  catch(xtreemfs::AddressToUUIDNotFoundException const &_e) {
    {
      jclass clazz =  jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/AddressToUUIDNotFoundException");
      jenv->ThrowNew(clazz, (&_e)->what());
      return 0;
    }
  }
  catch(xtreemfs::IOException const &_e) {
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaIOException, (&_e)->what());
      return 0;
    }
  }
  catch(xtreemfs::PosixErrorException const &_e) {
    {
      jclass clazz = jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/PosixErrorException");
      jmethodID mid = jenv->GetMethodID(clazz, "<init>", "(Lorg/xtreemfs/foundation/pbrpc/generatedinterfaces/RPC$POSIXErrno;Ljava/lang/String;)V");
      
      jclass clazz2 = jenv->FindClass("org/xtreemfs/foundation/pbrpc/generatedinterfaces/RPC$POSIXErrno");
      jmethodID mid2 = jenv->GetStaticMethodID(clazz2, "valueOf", "(I)Lorg/xtreemfs/foundation/pbrpc/generatedinterfaces/RPC$POSIXErrno;");
      
      jobject posix_errno = jenv->CallStaticObjectMethod(clazz2, mid2, (&_e)->posix_errno());
      jstring what = jenv->NewStringUTF((&_e)->what());
      jthrowable o = static_cast<jthrowable>(jenv->NewObject(clazz, mid, posix_errno, what));
      jenv->Throw(o);
      
      return 0;
    }
  }
  catch(xtreemfs::XtreemFSException const &_e) {
    {
      jclass clazz = jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/XtreemFSException");
      jenv->ThrowNew(clazz, (&_e)->what());
      return 0;
    }
  }
  
  *(std::vector< std::string > **)&jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_ClientProxy_1uUIDToAddress(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  xtreemfs::Client *arg1 = (xtreemfs::Client *) 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xtreemfs::Client **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  try {
    result = (arg1)->UUIDToAddress((std::string const &)*arg2);
  }
  catch(xtreemfs::AddressToUUIDNotFoundException const &_e) {
    {
      jclass clazz =  jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/AddressToUUIDNotFoundException");
      jenv->ThrowNew(clazz, (&_e)->what());
      return 0;
    }
  }
  catch(xtreemfs::UnknownAddressSchemeException const &_e) {
    {
      jclass clazz = jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/XtreemFSException");
      jenv->ThrowNew(clazz, (&_e)->what());
      return 0;
    }
  }
  catch(xtreemfs::XtreemFSException const &_e) {
    {
      jclass clazz = jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/XtreemFSException");
      jenv->ThrowNew(clazz, (&_e)->what());
      return 0;
    }
  }
  
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_ClientProxy_1getUUIDResolver(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  xtreemfs::Client *arg1 = (xtreemfs::Client *) 0 ;
  xtreemfs::UUIDResolver *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xtreemfs::Client **)&jarg1; 
  result = (xtreemfs::UUIDResolver *)(arg1)->GetUUIDResolver();
  *(xtreemfs::UUIDResolver **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_delete_1VolumeProxy(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  xtreemfs::Volume *arg1 = (xtreemfs::Volume *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(xtreemfs::Volume **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_VolumeProxy_1close(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  xtreemfs::Volume *arg1 = (xtreemfs::Volume *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xtreemfs::Volume **)&jarg1; 
  try {
    (arg1)->Close();
  }
  catch(xtreemfs::OpenFileHandlesLeftException const &_e) {
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, (&_e)->what());
    }
  }
  
}


SWIGEXPORT jbyteArray JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_VolumeProxy_1statFS(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2) {
  jbyteArray jresult = 0 ;
  xtreemfs::Volume *arg1 = (xtreemfs::Volume *) 0 ;
  xtreemfs::pbrpc::UserCredentials *arg2 = 0 ;
  xtreemfs::pbrpc::UserCredentials temp2 ;
  xtreemfs::pbrpc::StatVFS *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xtreemfs::Volume **)&jarg1; 
  {
    int proto_size = 0;
    boost::scoped_ptr<char> proto_buffer(
      JNIUtil::MakeCharArray(jenv, jarg2, &proto_size));
    
    bool parsed_ok = temp2.ParseFromArray(proto_buffer.get(), proto_size);
    if (!parsed_ok) {
      SWIG_JavaThrowException(jenv,
        SWIG_JavaRuntimeException,
        "Unable to parse xtreemfs::pbrpc::UserCredentials protocol message.");
    }
    arg2 = &temp2;
  }
  try {
    result = (xtreemfs::pbrpc::StatVFS *)(arg1)->StatFS((xtreemfs::pbrpc::UserCredentials const &)*arg2);
  }
  catch(xtreemfs::AddressToUUIDNotFoundException const &_e) {
    {
      jclass clazz =  jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/AddressToUUIDNotFoundException");
      jenv->ThrowNew(clazz, (&_e)->what());
      return 0;
    }
  }
  catch(xtreemfs::IOException const &_e) {
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaIOException, (&_e)->what());
      return 0;
    }
  }
  catch(xtreemfs::PosixErrorException const &_e) {
    {
      jclass clazz = jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/PosixErrorException");
      jmethodID mid = jenv->GetMethodID(clazz, "<init>", "(Lorg/xtreemfs/foundation/pbrpc/generatedinterfaces/RPC$POSIXErrno;Ljava/lang/String;)V");
      
      jclass clazz2 = jenv->FindClass("org/xtreemfs/foundation/pbrpc/generatedinterfaces/RPC$POSIXErrno");
      jmethodID mid2 = jenv->GetStaticMethodID(clazz2, "valueOf", "(I)Lorg/xtreemfs/foundation/pbrpc/generatedinterfaces/RPC$POSIXErrno;");
      
      jobject posix_errno = jenv->CallStaticObjectMethod(clazz2, mid2, (&_e)->posix_errno());
      jstring what = jenv->NewStringUTF((&_e)->what());
      jthrowable o = static_cast<jthrowable>(jenv->NewObject(clazz, mid, posix_errno, what));
      jenv->Throw(o);
      
      return 0;
    }
  }
  catch(xtreemfs::UnknownAddressSchemeException const &_e) {
    {
      jclass clazz = jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/XtreemFSException");
      jenv->ThrowNew(clazz, (&_e)->what());
      return 0;
    }
  }
  catch(xtreemfs::XtreemFSException const &_e) {
    {
      jclass clazz = jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/XtreemFSException");
      jenv->ThrowNew(clazz, (&_e)->what());
      return 0;
    }
  }
  
  {
    boost::scoped_ptr<char> buf(new char[result->ByteSize()]);
    
    result->SerializeWithCachedSizesToArray(
      reinterpret_cast<google::protobuf::uint8*>(buf.get()));
    jresult = JNIUtil::MakeJByteArray(jenv, buf.get(), result->ByteSize());
    if (true) {
      // To prevent a memory leak.
      delete result;
      result = NULL;
    }
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_VolumeProxy_1readLink(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2, jstring jarg3, jobjectArray jarg4) {
  xtreemfs::Volume *arg1 = (xtreemfs::Volume *) 0 ;
  xtreemfs::pbrpc::UserCredentials *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = (std::string *) 0 ;
  xtreemfs::pbrpc::UserCredentials temp2 ;
  std::string temp4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xtreemfs::Volume **)&jarg1; 
  {
    int proto_size = 0;
    boost::scoped_ptr<char> proto_buffer(
      JNIUtil::MakeCharArray(jenv, jarg2, &proto_size));
    
    bool parsed_ok = temp2.ParseFromArray(proto_buffer.get(), proto_size);
    if (!parsed_ok) {
      SWIG_JavaThrowException(jenv,
        SWIG_JavaRuntimeException,
        "Unable to parse xtreemfs::pbrpc::UserCredentials protocol message.");
    }
    arg2 = &temp2;
  }
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  {
    if (!jarg4) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return ;
    }
    if (jenv->GetArrayLength(jarg4) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return ;
    }
    arg4 = &temp4; 
  }
  try {
    (arg1)->ReadLink((xtreemfs::pbrpc::UserCredentials const &)*arg2,(std::string const &)*arg3,arg4);
  }
  catch(xtreemfs::AddressToUUIDNotFoundException const &_e) {
    {
      jclass clazz =  jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/AddressToUUIDNotFoundException");
      jenv->ThrowNew(clazz, (&_e)->what());
      return ;
    }
  }
  catch(xtreemfs::IOException const &_e) {
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaIOException, (&_e)->what());
      return ;
    }
  }
  catch(xtreemfs::PosixErrorException const &_e) {
    {
      jclass clazz = jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/PosixErrorException");
      jmethodID mid = jenv->GetMethodID(clazz, "<init>", "(Lorg/xtreemfs/foundation/pbrpc/generatedinterfaces/RPC$POSIXErrno;Ljava/lang/String;)V");
      
      jclass clazz2 = jenv->FindClass("org/xtreemfs/foundation/pbrpc/generatedinterfaces/RPC$POSIXErrno");
      jmethodID mid2 = jenv->GetStaticMethodID(clazz2, "valueOf", "(I)Lorg/xtreemfs/foundation/pbrpc/generatedinterfaces/RPC$POSIXErrno;");
      
      jobject posix_errno = jenv->CallStaticObjectMethod(clazz2, mid2, (&_e)->posix_errno());
      jstring what = jenv->NewStringUTF((&_e)->what());
      jthrowable o = static_cast<jthrowable>(jenv->NewObject(clazz, mid, posix_errno, what));
      jenv->Throw(o);
      
      return ;
    }
  }
  catch(xtreemfs::UnknownAddressSchemeException const &_e) {
    {
      jclass clazz = jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/XtreemFSException");
      jenv->ThrowNew(clazz, (&_e)->what());
      return ;
    }
  }
  catch(xtreemfs::XtreemFSException const &_e) {
    {
      jclass clazz = jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/XtreemFSException");
      jenv->ThrowNew(clazz, (&_e)->what());
      return ;
    }
  }
  
  {
    jstring jvalue = jenv->NewStringUTF(temp4.c_str()); 
    jenv->SetObjectArrayElement(jarg4, 0, jvalue);
  }
  
}


SWIGEXPORT void JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_VolumeProxy_1symlink(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2, jstring jarg3, jstring jarg4) {
  xtreemfs::Volume *arg1 = (xtreemfs::Volume *) 0 ;
  xtreemfs::pbrpc::UserCredentials *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  xtreemfs::pbrpc::UserCredentials temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xtreemfs::Volume **)&jarg1; 
  {
    int proto_size = 0;
    boost::scoped_ptr<char> proto_buffer(
      JNIUtil::MakeCharArray(jenv, jarg2, &proto_size));
    
    bool parsed_ok = temp2.ParseFromArray(proto_buffer.get(), proto_size);
    if (!parsed_ok) {
      SWIG_JavaThrowException(jenv,
        SWIG_JavaRuntimeException,
        "Unable to parse xtreemfs::pbrpc::UserCredentials protocol message.");
    }
    arg2 = &temp2;
  }
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  try {
    (arg1)->Symlink((xtreemfs::pbrpc::UserCredentials const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
  }
  catch(xtreemfs::AddressToUUIDNotFoundException const &_e) {
    {
      jclass clazz =  jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/AddressToUUIDNotFoundException");
      jenv->ThrowNew(clazz, (&_e)->what());
      return ;
    }
  }
  catch(xtreemfs::IOException const &_e) {
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaIOException, (&_e)->what());
      return ;
    }
  }
  catch(xtreemfs::PosixErrorException const &_e) {
    {
      jclass clazz = jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/PosixErrorException");
      jmethodID mid = jenv->GetMethodID(clazz, "<init>", "(Lorg/xtreemfs/foundation/pbrpc/generatedinterfaces/RPC$POSIXErrno;Ljava/lang/String;)V");
      
      jclass clazz2 = jenv->FindClass("org/xtreemfs/foundation/pbrpc/generatedinterfaces/RPC$POSIXErrno");
      jmethodID mid2 = jenv->GetStaticMethodID(clazz2, "valueOf", "(I)Lorg/xtreemfs/foundation/pbrpc/generatedinterfaces/RPC$POSIXErrno;");
      
      jobject posix_errno = jenv->CallStaticObjectMethod(clazz2, mid2, (&_e)->posix_errno());
      jstring what = jenv->NewStringUTF((&_e)->what());
      jthrowable o = static_cast<jthrowable>(jenv->NewObject(clazz, mid, posix_errno, what));
      jenv->Throw(o);
      
      return ;
    }
  }
  catch(xtreemfs::UnknownAddressSchemeException const &_e) {
    {
      jclass clazz = jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/XtreemFSException");
      jenv->ThrowNew(clazz, (&_e)->what());
      return ;
    }
  }
  catch(xtreemfs::XtreemFSException const &_e) {
    {
      jclass clazz = jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/XtreemFSException");
      jenv->ThrowNew(clazz, (&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_VolumeProxy_1link(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2, jstring jarg3, jstring jarg4) {
  xtreemfs::Volume *arg1 = (xtreemfs::Volume *) 0 ;
  xtreemfs::pbrpc::UserCredentials *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  xtreemfs::pbrpc::UserCredentials temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xtreemfs::Volume **)&jarg1; 
  {
    int proto_size = 0;
    boost::scoped_ptr<char> proto_buffer(
      JNIUtil::MakeCharArray(jenv, jarg2, &proto_size));
    
    bool parsed_ok = temp2.ParseFromArray(proto_buffer.get(), proto_size);
    if (!parsed_ok) {
      SWIG_JavaThrowException(jenv,
        SWIG_JavaRuntimeException,
        "Unable to parse xtreemfs::pbrpc::UserCredentials protocol message.");
    }
    arg2 = &temp2;
  }
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  try {
    (arg1)->Link((xtreemfs::pbrpc::UserCredentials const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
  }
  catch(xtreemfs::AddressToUUIDNotFoundException const &_e) {
    {
      jclass clazz =  jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/AddressToUUIDNotFoundException");
      jenv->ThrowNew(clazz, (&_e)->what());
      return ;
    }
  }
  catch(xtreemfs::IOException const &_e) {
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaIOException, (&_e)->what());
      return ;
    }
  }
  catch(xtreemfs::PosixErrorException const &_e) {
    {
      jclass clazz = jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/PosixErrorException");
      jmethodID mid = jenv->GetMethodID(clazz, "<init>", "(Lorg/xtreemfs/foundation/pbrpc/generatedinterfaces/RPC$POSIXErrno;Ljava/lang/String;)V");
      
      jclass clazz2 = jenv->FindClass("org/xtreemfs/foundation/pbrpc/generatedinterfaces/RPC$POSIXErrno");
      jmethodID mid2 = jenv->GetStaticMethodID(clazz2, "valueOf", "(I)Lorg/xtreemfs/foundation/pbrpc/generatedinterfaces/RPC$POSIXErrno;");
      
      jobject posix_errno = jenv->CallStaticObjectMethod(clazz2, mid2, (&_e)->posix_errno());
      jstring what = jenv->NewStringUTF((&_e)->what());
      jthrowable o = static_cast<jthrowable>(jenv->NewObject(clazz, mid, posix_errno, what));
      jenv->Throw(o);
      
      return ;
    }
  }
  catch(xtreemfs::UnknownAddressSchemeException const &_e) {
    {
      jclass clazz = jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/XtreemFSException");
      jenv->ThrowNew(clazz, (&_e)->what());
      return ;
    }
  }
  catch(xtreemfs::XtreemFSException const &_e) {
    {
      jclass clazz = jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/XtreemFSException");
      jenv->ThrowNew(clazz, (&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_VolumeProxy_1access(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2, jstring jarg3, jint jarg4) {
  xtreemfs::Volume *arg1 = (xtreemfs::Volume *) 0 ;
  xtreemfs::pbrpc::UserCredentials *arg2 = 0 ;
  std::string *arg3 = 0 ;
  xtreemfs::pbrpc::ACCESS_FLAGS arg4 ;
  xtreemfs::pbrpc::UserCredentials temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xtreemfs::Volume **)&jarg1; 
  {
    int proto_size = 0;
    boost::scoped_ptr<char> proto_buffer(
      JNIUtil::MakeCharArray(jenv, jarg2, &proto_size));
    
    bool parsed_ok = temp2.ParseFromArray(proto_buffer.get(), proto_size);
    if (!parsed_ok) {
      SWIG_JavaThrowException(jenv,
        SWIG_JavaRuntimeException,
        "Unable to parse xtreemfs::pbrpc::UserCredentials protocol message.");
    }
    arg2 = &temp2;
  }
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  {
    arg4 = static_cast<xtreemfs::pbrpc::ACCESS_FLAGS>(jarg4);
  }
  try {
    (arg1)->Access((xtreemfs::pbrpc::UserCredentials const &)*arg2,(std::string const &)*arg3,arg4);
  }
  catch(xtreemfs::AddressToUUIDNotFoundException const &_e) {
    {
      jclass clazz =  jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/AddressToUUIDNotFoundException");
      jenv->ThrowNew(clazz, (&_e)->what());
      return ;
    }
  }
  catch(xtreemfs::IOException const &_e) {
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaIOException, (&_e)->what());
      return ;
    }
  }
  catch(xtreemfs::PosixErrorException const &_e) {
    {
      jclass clazz = jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/PosixErrorException");
      jmethodID mid = jenv->GetMethodID(clazz, "<init>", "(Lorg/xtreemfs/foundation/pbrpc/generatedinterfaces/RPC$POSIXErrno;Ljava/lang/String;)V");
      
      jclass clazz2 = jenv->FindClass("org/xtreemfs/foundation/pbrpc/generatedinterfaces/RPC$POSIXErrno");
      jmethodID mid2 = jenv->GetStaticMethodID(clazz2, "valueOf", "(I)Lorg/xtreemfs/foundation/pbrpc/generatedinterfaces/RPC$POSIXErrno;");
      
      jobject posix_errno = jenv->CallStaticObjectMethod(clazz2, mid2, (&_e)->posix_errno());
      jstring what = jenv->NewStringUTF((&_e)->what());
      jthrowable o = static_cast<jthrowable>(jenv->NewObject(clazz, mid, posix_errno, what));
      jenv->Throw(o);
      
      return ;
    }
  }
  catch(xtreemfs::UnknownAddressSchemeException const &_e) {
    {
      jclass clazz = jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/XtreemFSException");
      jenv->ThrowNew(clazz, (&_e)->what());
      return ;
    }
  }
  catch(xtreemfs::XtreemFSException const &_e) {
    {
      jclass clazz = jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/XtreemFSException");
      jenv->ThrowNew(clazz, (&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT jlong JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_VolumeProxy_1openFileProxy_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2, jstring jarg3, jint jarg4) {
  jlong jresult = 0 ;
  xtreemfs::Volume *arg1 = (xtreemfs::Volume *) 0 ;
  xtreemfs::pbrpc::UserCredentials *arg2 = 0 ;
  std::string *arg3 = 0 ;
  xtreemfs::pbrpc::SYSTEM_V_FCNTL arg4 ;
  xtreemfs::pbrpc::UserCredentials temp2 ;
  xtreemfs::FileHandle *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xtreemfs::Volume **)&jarg1; 
  {
    int proto_size = 0;
    boost::scoped_ptr<char> proto_buffer(
      JNIUtil::MakeCharArray(jenv, jarg2, &proto_size));
    
    bool parsed_ok = temp2.ParseFromArray(proto_buffer.get(), proto_size);
    if (!parsed_ok) {
      SWIG_JavaThrowException(jenv,
        SWIG_JavaRuntimeException,
        "Unable to parse xtreemfs::pbrpc::UserCredentials protocol message.");
    }
    arg2 = &temp2;
  }
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  {
    arg4 = static_cast<xtreemfs::pbrpc::SYSTEM_V_FCNTL>(jarg4);
  }
  try {
    result = (xtreemfs::FileHandle *)(arg1)->OpenFile((xtreemfs::pbrpc::UserCredentials const &)*arg2,(std::string const &)*arg3,arg4);
  }
  catch(xtreemfs::AddressToUUIDNotFoundException const &_e) {
    {
      jclass clazz =  jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/AddressToUUIDNotFoundException");
      jenv->ThrowNew(clazz, (&_e)->what());
      return 0;
    }
  }
  catch(xtreemfs::IOException const &_e) {
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaIOException, (&_e)->what());
      return 0;
    }
  }
  catch(xtreemfs::PosixErrorException const &_e) {
    {
      jclass clazz = jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/PosixErrorException");
      jmethodID mid = jenv->GetMethodID(clazz, "<init>", "(Lorg/xtreemfs/foundation/pbrpc/generatedinterfaces/RPC$POSIXErrno;Ljava/lang/String;)V");
      
      jclass clazz2 = jenv->FindClass("org/xtreemfs/foundation/pbrpc/generatedinterfaces/RPC$POSIXErrno");
      jmethodID mid2 = jenv->GetStaticMethodID(clazz2, "valueOf", "(I)Lorg/xtreemfs/foundation/pbrpc/generatedinterfaces/RPC$POSIXErrno;");
      
      jobject posix_errno = jenv->CallStaticObjectMethod(clazz2, mid2, (&_e)->posix_errno());
      jstring what = jenv->NewStringUTF((&_e)->what());
      jthrowable o = static_cast<jthrowable>(jenv->NewObject(clazz, mid, posix_errno, what));
      jenv->Throw(o);
      
      return 0;
    }
  }
  catch(xtreemfs::UnknownAddressSchemeException const &_e) {
    {
      jclass clazz = jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/XtreemFSException");
      jenv->ThrowNew(clazz, (&_e)->what());
      return 0;
    }
  }
  catch(xtreemfs::XtreemFSException const &_e) {
    {
      jclass clazz = jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/XtreemFSException");
      jenv->ThrowNew(clazz, (&_e)->what());
      return 0;
    }
  }
  
  *(xtreemfs::FileHandle **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_VolumeProxy_1openFileProxy_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2, jstring jarg3, jint jarg4, jlong jarg5) {
  jlong jresult = 0 ;
  xtreemfs::Volume *arg1 = (xtreemfs::Volume *) 0 ;
  xtreemfs::pbrpc::UserCredentials *arg2 = 0 ;
  std::string *arg3 = 0 ;
  xtreemfs::pbrpc::SYSTEM_V_FCNTL arg4 ;
  uint32_t arg5 ;
  xtreemfs::pbrpc::UserCredentials temp2 ;
  xtreemfs::FileHandle *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xtreemfs::Volume **)&jarg1; 
  {
    int proto_size = 0;
    boost::scoped_ptr<char> proto_buffer(
      JNIUtil::MakeCharArray(jenv, jarg2, &proto_size));
    
    bool parsed_ok = temp2.ParseFromArray(proto_buffer.get(), proto_size);
    if (!parsed_ok) {
      SWIG_JavaThrowException(jenv,
        SWIG_JavaRuntimeException,
        "Unable to parse xtreemfs::pbrpc::UserCredentials protocol message.");
    }
    arg2 = &temp2;
  }
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  {
    arg4 = static_cast<xtreemfs::pbrpc::SYSTEM_V_FCNTL>(jarg4);
  }
  arg5 = (uint32_t)jarg5; 
  try {
    result = (xtreemfs::FileHandle *)(arg1)->OpenFile((xtreemfs::pbrpc::UserCredentials const &)*arg2,(std::string const &)*arg3,arg4,arg5);
  }
  catch(xtreemfs::AddressToUUIDNotFoundException const &_e) {
    {
      jclass clazz =  jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/AddressToUUIDNotFoundException");
      jenv->ThrowNew(clazz, (&_e)->what());
      return 0;
    }
  }
  catch(xtreemfs::IOException const &_e) {
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaIOException, (&_e)->what());
      return 0;
    }
  }
  catch(xtreemfs::PosixErrorException const &_e) {
    {
      jclass clazz = jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/PosixErrorException");
      jmethodID mid = jenv->GetMethodID(clazz, "<init>", "(Lorg/xtreemfs/foundation/pbrpc/generatedinterfaces/RPC$POSIXErrno;Ljava/lang/String;)V");
      
      jclass clazz2 = jenv->FindClass("org/xtreemfs/foundation/pbrpc/generatedinterfaces/RPC$POSIXErrno");
      jmethodID mid2 = jenv->GetStaticMethodID(clazz2, "valueOf", "(I)Lorg/xtreemfs/foundation/pbrpc/generatedinterfaces/RPC$POSIXErrno;");
      
      jobject posix_errno = jenv->CallStaticObjectMethod(clazz2, mid2, (&_e)->posix_errno());
      jstring what = jenv->NewStringUTF((&_e)->what());
      jthrowable o = static_cast<jthrowable>(jenv->NewObject(clazz, mid, posix_errno, what));
      jenv->Throw(o);
      
      return 0;
    }
  }
  catch(xtreemfs::UnknownAddressSchemeException const &_e) {
    {
      jclass clazz = jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/XtreemFSException");
      jenv->ThrowNew(clazz, (&_e)->what());
      return 0;
    }
  }
  catch(xtreemfs::XtreemFSException const &_e) {
    {
      jclass clazz = jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/XtreemFSException");
      jenv->ThrowNew(clazz, (&_e)->what());
      return 0;
    }
  }
  
  *(xtreemfs::FileHandle **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_VolumeProxy_1openFileProxy_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2, jstring jarg3, jint jarg4, jlong jarg5, jlong jarg6) {
  jlong jresult = 0 ;
  xtreemfs::Volume *arg1 = (xtreemfs::Volume *) 0 ;
  xtreemfs::pbrpc::UserCredentials *arg2 = 0 ;
  std::string *arg3 = 0 ;
  xtreemfs::pbrpc::SYSTEM_V_FCNTL arg4 ;
  uint32_t arg5 ;
  uint32_t arg6 ;
  xtreemfs::pbrpc::UserCredentials temp2 ;
  xtreemfs::FileHandle *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xtreemfs::Volume **)&jarg1; 
  {
    int proto_size = 0;
    boost::scoped_ptr<char> proto_buffer(
      JNIUtil::MakeCharArray(jenv, jarg2, &proto_size));
    
    bool parsed_ok = temp2.ParseFromArray(proto_buffer.get(), proto_size);
    if (!parsed_ok) {
      SWIG_JavaThrowException(jenv,
        SWIG_JavaRuntimeException,
        "Unable to parse xtreemfs::pbrpc::UserCredentials protocol message.");
    }
    arg2 = &temp2;
  }
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  {
    arg4 = static_cast<xtreemfs::pbrpc::SYSTEM_V_FCNTL>(jarg4);
  }
  arg5 = (uint32_t)jarg5; 
  arg6 = (uint32_t)jarg6; 
  try {
    result = (xtreemfs::FileHandle *)(arg1)->OpenFile((xtreemfs::pbrpc::UserCredentials const &)*arg2,(std::string const &)*arg3,arg4,arg5,arg6);
  }
  catch(xtreemfs::AddressToUUIDNotFoundException const &_e) {
    {
      jclass clazz =  jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/AddressToUUIDNotFoundException");
      jenv->ThrowNew(clazz, (&_e)->what());
      return 0;
    }
  }
  catch(xtreemfs::IOException const &_e) {
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaIOException, (&_e)->what());
      return 0;
    }
  }
  catch(xtreemfs::PosixErrorException const &_e) {
    {
      jclass clazz = jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/PosixErrorException");
      jmethodID mid = jenv->GetMethodID(clazz, "<init>", "(Lorg/xtreemfs/foundation/pbrpc/generatedinterfaces/RPC$POSIXErrno;Ljava/lang/String;)V");
      
      jclass clazz2 = jenv->FindClass("org/xtreemfs/foundation/pbrpc/generatedinterfaces/RPC$POSIXErrno");
      jmethodID mid2 = jenv->GetStaticMethodID(clazz2, "valueOf", "(I)Lorg/xtreemfs/foundation/pbrpc/generatedinterfaces/RPC$POSIXErrno;");
      
      jobject posix_errno = jenv->CallStaticObjectMethod(clazz2, mid2, (&_e)->posix_errno());
      jstring what = jenv->NewStringUTF((&_e)->what());
      jthrowable o = static_cast<jthrowable>(jenv->NewObject(clazz, mid, posix_errno, what));
      jenv->Throw(o);
      
      return 0;
    }
  }
  catch(xtreemfs::UnknownAddressSchemeException const &_e) {
    {
      jclass clazz = jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/XtreemFSException");
      jenv->ThrowNew(clazz, (&_e)->what());
      return 0;
    }
  }
  catch(xtreemfs::XtreemFSException const &_e) {
    {
      jclass clazz = jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/XtreemFSException");
      jenv->ThrowNew(clazz, (&_e)->what());
      return 0;
    }
  }
  
  *(xtreemfs::FileHandle **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_VolumeProxy_1truncate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2, jstring jarg3, jint jarg4) {
  xtreemfs::Volume *arg1 = (xtreemfs::Volume *) 0 ;
  xtreemfs::pbrpc::UserCredentials *arg2 = 0 ;
  std::string *arg3 = 0 ;
  off_t arg4 ;
  xtreemfs::pbrpc::UserCredentials temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xtreemfs::Volume **)&jarg1; 
  {
    int proto_size = 0;
    boost::scoped_ptr<char> proto_buffer(
      JNIUtil::MakeCharArray(jenv, jarg2, &proto_size));
    
    bool parsed_ok = temp2.ParseFromArray(proto_buffer.get(), proto_size);
    if (!parsed_ok) {
      SWIG_JavaThrowException(jenv,
        SWIG_JavaRuntimeException,
        "Unable to parse xtreemfs::pbrpc::UserCredentials protocol message.");
    }
    arg2 = &temp2;
  }
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = (off_t)jarg4; 
  try {
    (arg1)->Truncate((xtreemfs::pbrpc::UserCredentials const &)*arg2,(std::string const &)*arg3,arg4);
  }
  catch(xtreemfs::AddressToUUIDNotFoundException const &_e) {
    {
      jclass clazz =  jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/AddressToUUIDNotFoundException");
      jenv->ThrowNew(clazz, (&_e)->what());
      return ;
    }
  }
  catch(xtreemfs::IOException const &_e) {
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaIOException, (&_e)->what());
      return ;
    }
  }
  catch(xtreemfs::PosixErrorException const &_e) {
    {
      jclass clazz = jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/PosixErrorException");
      jmethodID mid = jenv->GetMethodID(clazz, "<init>", "(Lorg/xtreemfs/foundation/pbrpc/generatedinterfaces/RPC$POSIXErrno;Ljava/lang/String;)V");
      
      jclass clazz2 = jenv->FindClass("org/xtreemfs/foundation/pbrpc/generatedinterfaces/RPC$POSIXErrno");
      jmethodID mid2 = jenv->GetStaticMethodID(clazz2, "valueOf", "(I)Lorg/xtreemfs/foundation/pbrpc/generatedinterfaces/RPC$POSIXErrno;");
      
      jobject posix_errno = jenv->CallStaticObjectMethod(clazz2, mid2, (&_e)->posix_errno());
      jstring what = jenv->NewStringUTF((&_e)->what());
      jthrowable o = static_cast<jthrowable>(jenv->NewObject(clazz, mid, posix_errno, what));
      jenv->Throw(o);
      
      return ;
    }
  }
  catch(xtreemfs::UnknownAddressSchemeException const &_e) {
    {
      jclass clazz = jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/XtreemFSException");
      jenv->ThrowNew(clazz, (&_e)->what());
      return ;
    }
  }
  catch(xtreemfs::XtreemFSException const &_e) {
    {
      jclass clazz = jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/XtreemFSException");
      jenv->ThrowNew(clazz, (&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT jbyteArray JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_VolumeProxy_1getAttr_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2, jstring jarg3) {
  jbyteArray jresult = 0 ;
  xtreemfs::Volume *arg1 = (xtreemfs::Volume *) 0 ;
  xtreemfs::pbrpc::UserCredentials *arg2 = 0 ;
  std::string *arg3 = 0 ;
  xtreemfs::pbrpc::Stat *arg4 = (xtreemfs::pbrpc::Stat *) 0 ;
  xtreemfs::pbrpc::UserCredentials temp2 ;
  xtreemfs::pbrpc::Stat temp4 ;
  
  (void)jenv;
  (void)jcls;
  {
    arg4 = &temp4;
  }
  (void)jarg1_;
  arg1 = *(xtreemfs::Volume **)&jarg1; 
  {
    int proto_size = 0;
    boost::scoped_ptr<char> proto_buffer(
      JNIUtil::MakeCharArray(jenv, jarg2, &proto_size));
    
    bool parsed_ok = temp2.ParseFromArray(proto_buffer.get(), proto_size);
    if (!parsed_ok) {
      SWIG_JavaThrowException(jenv,
        SWIG_JavaRuntimeException,
        "Unable to parse xtreemfs::pbrpc::UserCredentials protocol message.");
    }
    arg2 = &temp2;
  }
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  try {
    (arg1)->GetAttr((xtreemfs::pbrpc::UserCredentials const &)*arg2,(std::string const &)*arg3,arg4);
  }
  catch(xtreemfs::AddressToUUIDNotFoundException const &_e) {
    {
      jclass clazz =  jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/AddressToUUIDNotFoundException");
      jenv->ThrowNew(clazz, (&_e)->what());
      return 0;
    }
  }
  catch(xtreemfs::IOException const &_e) {
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaIOException, (&_e)->what());
      return 0;
    }
  }
  catch(xtreemfs::PosixErrorException const &_e) {
    {
      jclass clazz = jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/PosixErrorException");
      jmethodID mid = jenv->GetMethodID(clazz, "<init>", "(Lorg/xtreemfs/foundation/pbrpc/generatedinterfaces/RPC$POSIXErrno;Ljava/lang/String;)V");
      
      jclass clazz2 = jenv->FindClass("org/xtreemfs/foundation/pbrpc/generatedinterfaces/RPC$POSIXErrno");
      jmethodID mid2 = jenv->GetStaticMethodID(clazz2, "valueOf", "(I)Lorg/xtreemfs/foundation/pbrpc/generatedinterfaces/RPC$POSIXErrno;");
      
      jobject posix_errno = jenv->CallStaticObjectMethod(clazz2, mid2, (&_e)->posix_errno());
      jstring what = jenv->NewStringUTF((&_e)->what());
      jthrowable o = static_cast<jthrowable>(jenv->NewObject(clazz, mid, posix_errno, what));
      jenv->Throw(o);
      
      return 0;
    }
  }
  catch(xtreemfs::UnknownAddressSchemeException const &_e) {
    {
      jclass clazz = jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/XtreemFSException");
      jenv->ThrowNew(clazz, (&_e)->what());
      return 0;
    }
  }
  catch(xtreemfs::XtreemFSException const &_e) {
    {
      jclass clazz = jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/XtreemFSException");
      jenv->ThrowNew(clazz, (&_e)->what());
      return 0;
    }
  }
  
  {
    boost::scoped_ptr<char> buf(new char[arg4->ByteSize()]);
    
    arg4->SerializeWithCachedSizesToArray(
      reinterpret_cast<google::protobuf::uint8*>(buf.get()));
    jresult = JNIUtil::MakeJByteArray(jenv, buf.get(), arg4->ByteSize());
  }
  return jresult;
}


SWIGEXPORT jbyteArray JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_VolumeProxy_1getAttr_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2, jstring jarg3, jboolean jarg4) {
  jbyteArray jresult = 0 ;
  xtreemfs::Volume *arg1 = (xtreemfs::Volume *) 0 ;
  xtreemfs::pbrpc::UserCredentials *arg2 = 0 ;
  std::string *arg3 = 0 ;
  bool arg4 ;
  xtreemfs::pbrpc::Stat *arg5 = (xtreemfs::pbrpc::Stat *) 0 ;
  xtreemfs::pbrpc::UserCredentials temp2 ;
  xtreemfs::pbrpc::Stat temp5 ;
  
  (void)jenv;
  (void)jcls;
  {
    arg5 = &temp5;
  }
  (void)jarg1_;
  arg1 = *(xtreemfs::Volume **)&jarg1; 
  {
    int proto_size = 0;
    boost::scoped_ptr<char> proto_buffer(
      JNIUtil::MakeCharArray(jenv, jarg2, &proto_size));
    
    bool parsed_ok = temp2.ParseFromArray(proto_buffer.get(), proto_size);
    if (!parsed_ok) {
      SWIG_JavaThrowException(jenv,
        SWIG_JavaRuntimeException,
        "Unable to parse xtreemfs::pbrpc::UserCredentials protocol message.");
    }
    arg2 = &temp2;
  }
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = jarg4 ? true : false; 
  try {
    (arg1)->GetAttr((xtreemfs::pbrpc::UserCredentials const &)*arg2,(std::string const &)*arg3,arg4,arg5);
  }
  catch(xtreemfs::AddressToUUIDNotFoundException const &_e) {
    {
      jclass clazz =  jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/AddressToUUIDNotFoundException");
      jenv->ThrowNew(clazz, (&_e)->what());
      return 0;
    }
  }
  catch(xtreemfs::IOException const &_e) {
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaIOException, (&_e)->what());
      return 0;
    }
  }
  catch(xtreemfs::PosixErrorException const &_e) {
    {
      jclass clazz = jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/PosixErrorException");
      jmethodID mid = jenv->GetMethodID(clazz, "<init>", "(Lorg/xtreemfs/foundation/pbrpc/generatedinterfaces/RPC$POSIXErrno;Ljava/lang/String;)V");
      
      jclass clazz2 = jenv->FindClass("org/xtreemfs/foundation/pbrpc/generatedinterfaces/RPC$POSIXErrno");
      jmethodID mid2 = jenv->GetStaticMethodID(clazz2, "valueOf", "(I)Lorg/xtreemfs/foundation/pbrpc/generatedinterfaces/RPC$POSIXErrno;");
      
      jobject posix_errno = jenv->CallStaticObjectMethod(clazz2, mid2, (&_e)->posix_errno());
      jstring what = jenv->NewStringUTF((&_e)->what());
      jthrowable o = static_cast<jthrowable>(jenv->NewObject(clazz, mid, posix_errno, what));
      jenv->Throw(o);
      
      return 0;
    }
  }
  catch(xtreemfs::UnknownAddressSchemeException const &_e) {
    {
      jclass clazz = jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/XtreemFSException");
      jenv->ThrowNew(clazz, (&_e)->what());
      return 0;
    }
  }
  catch(xtreemfs::XtreemFSException const &_e) {
    {
      jclass clazz = jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/XtreemFSException");
      jenv->ThrowNew(clazz, (&_e)->what());
      return 0;
    }
  }
  
  {
    boost::scoped_ptr<char> buf(new char[arg5->ByteSize()]);
    
    arg5->SerializeWithCachedSizesToArray(
      reinterpret_cast<google::protobuf::uint8*>(buf.get()));
    jresult = JNIUtil::MakeJByteArray(jenv, buf.get(), arg5->ByteSize());
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_VolumeProxy_1setAttr(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2, jstring jarg3, jbyteArray jarg4, jint jarg5) {
  xtreemfs::Volume *arg1 = (xtreemfs::Volume *) 0 ;
  xtreemfs::pbrpc::UserCredentials *arg2 = 0 ;
  std::string *arg3 = 0 ;
  xtreemfs::pbrpc::Stat *arg4 = 0 ;
  xtreemfs::pbrpc::Setattrs arg5 ;
  xtreemfs::pbrpc::UserCredentials temp2 ;
  xtreemfs::pbrpc::Stat temp4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xtreemfs::Volume **)&jarg1; 
  {
    int proto_size = 0;
    boost::scoped_ptr<char> proto_buffer(
      JNIUtil::MakeCharArray(jenv, jarg2, &proto_size));
    
    bool parsed_ok = temp2.ParseFromArray(proto_buffer.get(), proto_size);
    if (!parsed_ok) {
      SWIG_JavaThrowException(jenv,
        SWIG_JavaRuntimeException,
        "Unable to parse xtreemfs::pbrpc::UserCredentials protocol message.");
    }
    arg2 = &temp2;
  }
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  {
    int proto_size = 0;
    boost::scoped_ptr<char> proto_buffer(
      JNIUtil::MakeCharArray(jenv, jarg4, &proto_size));
    
    bool parsed_ok = temp4.ParseFromArray(proto_buffer.get(), proto_size);
    if (!parsed_ok) {
      SWIG_JavaThrowException(jenv,
        SWIG_JavaRuntimeException,
        "Unable to parse xtreemfs::pbrpc::Stat protocol message.");
    }
    arg4 = &temp4;
  }
  {
    arg5 = static_cast<xtreemfs::pbrpc::Setattrs>(jarg5);
  }
  try {
    (arg1)->SetAttr((xtreemfs::pbrpc::UserCredentials const &)*arg2,(std::string const &)*arg3,(xtreemfs::pbrpc::Stat const &)*arg4,arg5);
  }
  catch(xtreemfs::AddressToUUIDNotFoundException const &_e) {
    {
      jclass clazz =  jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/AddressToUUIDNotFoundException");
      jenv->ThrowNew(clazz, (&_e)->what());
      return ;
    }
  }
  catch(xtreemfs::IOException const &_e) {
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaIOException, (&_e)->what());
      return ;
    }
  }
  catch(xtreemfs::PosixErrorException const &_e) {
    {
      jclass clazz = jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/PosixErrorException");
      jmethodID mid = jenv->GetMethodID(clazz, "<init>", "(Lorg/xtreemfs/foundation/pbrpc/generatedinterfaces/RPC$POSIXErrno;Ljava/lang/String;)V");
      
      jclass clazz2 = jenv->FindClass("org/xtreemfs/foundation/pbrpc/generatedinterfaces/RPC$POSIXErrno");
      jmethodID mid2 = jenv->GetStaticMethodID(clazz2, "valueOf", "(I)Lorg/xtreemfs/foundation/pbrpc/generatedinterfaces/RPC$POSIXErrno;");
      
      jobject posix_errno = jenv->CallStaticObjectMethod(clazz2, mid2, (&_e)->posix_errno());
      jstring what = jenv->NewStringUTF((&_e)->what());
      jthrowable o = static_cast<jthrowable>(jenv->NewObject(clazz, mid, posix_errno, what));
      jenv->Throw(o);
      
      return ;
    }
  }
  catch(xtreemfs::UnknownAddressSchemeException const &_e) {
    {
      jclass clazz = jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/XtreemFSException");
      jenv->ThrowNew(clazz, (&_e)->what());
      return ;
    }
  }
  catch(xtreemfs::XtreemFSException const &_e) {
    {
      jclass clazz = jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/XtreemFSException");
      jenv->ThrowNew(clazz, (&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_VolumeProxy_1unlink(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2, jstring jarg3) {
  xtreemfs::Volume *arg1 = (xtreemfs::Volume *) 0 ;
  xtreemfs::pbrpc::UserCredentials *arg2 = 0 ;
  std::string *arg3 = 0 ;
  xtreemfs::pbrpc::UserCredentials temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xtreemfs::Volume **)&jarg1; 
  {
    int proto_size = 0;
    boost::scoped_ptr<char> proto_buffer(
      JNIUtil::MakeCharArray(jenv, jarg2, &proto_size));
    
    bool parsed_ok = temp2.ParseFromArray(proto_buffer.get(), proto_size);
    if (!parsed_ok) {
      SWIG_JavaThrowException(jenv,
        SWIG_JavaRuntimeException,
        "Unable to parse xtreemfs::pbrpc::UserCredentials protocol message.");
    }
    arg2 = &temp2;
  }
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  try {
    (arg1)->Unlink((xtreemfs::pbrpc::UserCredentials const &)*arg2,(std::string const &)*arg3);
  }
  catch(xtreemfs::AddressToUUIDNotFoundException const &_e) {
    {
      jclass clazz =  jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/AddressToUUIDNotFoundException");
      jenv->ThrowNew(clazz, (&_e)->what());
      return ;
    }
  }
  catch(xtreemfs::IOException const &_e) {
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaIOException, (&_e)->what());
      return ;
    }
  }
  catch(xtreemfs::PosixErrorException const &_e) {
    {
      jclass clazz = jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/PosixErrorException");
      jmethodID mid = jenv->GetMethodID(clazz, "<init>", "(Lorg/xtreemfs/foundation/pbrpc/generatedinterfaces/RPC$POSIXErrno;Ljava/lang/String;)V");
      
      jclass clazz2 = jenv->FindClass("org/xtreemfs/foundation/pbrpc/generatedinterfaces/RPC$POSIXErrno");
      jmethodID mid2 = jenv->GetStaticMethodID(clazz2, "valueOf", "(I)Lorg/xtreemfs/foundation/pbrpc/generatedinterfaces/RPC$POSIXErrno;");
      
      jobject posix_errno = jenv->CallStaticObjectMethod(clazz2, mid2, (&_e)->posix_errno());
      jstring what = jenv->NewStringUTF((&_e)->what());
      jthrowable o = static_cast<jthrowable>(jenv->NewObject(clazz, mid, posix_errno, what));
      jenv->Throw(o);
      
      return ;
    }
  }
  catch(xtreemfs::UnknownAddressSchemeException const &_e) {
    {
      jclass clazz = jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/XtreemFSException");
      jenv->ThrowNew(clazz, (&_e)->what());
      return ;
    }
  }
  catch(xtreemfs::XtreemFSException const &_e) {
    {
      jclass clazz = jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/XtreemFSException");
      jenv->ThrowNew(clazz, (&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_VolumeProxy_1rename(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2, jstring jarg3, jstring jarg4) {
  xtreemfs::Volume *arg1 = (xtreemfs::Volume *) 0 ;
  xtreemfs::pbrpc::UserCredentials *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  xtreemfs::pbrpc::UserCredentials temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xtreemfs::Volume **)&jarg1; 
  {
    int proto_size = 0;
    boost::scoped_ptr<char> proto_buffer(
      JNIUtil::MakeCharArray(jenv, jarg2, &proto_size));
    
    bool parsed_ok = temp2.ParseFromArray(proto_buffer.get(), proto_size);
    if (!parsed_ok) {
      SWIG_JavaThrowException(jenv,
        SWIG_JavaRuntimeException,
        "Unable to parse xtreemfs::pbrpc::UserCredentials protocol message.");
    }
    arg2 = &temp2;
  }
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  try {
    (arg1)->Rename((xtreemfs::pbrpc::UserCredentials const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
  }
  catch(xtreemfs::AddressToUUIDNotFoundException const &_e) {
    {
      jclass clazz =  jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/AddressToUUIDNotFoundException");
      jenv->ThrowNew(clazz, (&_e)->what());
      return ;
    }
  }
  catch(xtreemfs::IOException const &_e) {
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaIOException, (&_e)->what());
      return ;
    }
  }
  catch(xtreemfs::PosixErrorException const &_e) {
    {
      jclass clazz = jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/PosixErrorException");
      jmethodID mid = jenv->GetMethodID(clazz, "<init>", "(Lorg/xtreemfs/foundation/pbrpc/generatedinterfaces/RPC$POSIXErrno;Ljava/lang/String;)V");
      
      jclass clazz2 = jenv->FindClass("org/xtreemfs/foundation/pbrpc/generatedinterfaces/RPC$POSIXErrno");
      jmethodID mid2 = jenv->GetStaticMethodID(clazz2, "valueOf", "(I)Lorg/xtreemfs/foundation/pbrpc/generatedinterfaces/RPC$POSIXErrno;");
      
      jobject posix_errno = jenv->CallStaticObjectMethod(clazz2, mid2, (&_e)->posix_errno());
      jstring what = jenv->NewStringUTF((&_e)->what());
      jthrowable o = static_cast<jthrowable>(jenv->NewObject(clazz, mid, posix_errno, what));
      jenv->Throw(o);
      
      return ;
    }
  }
  catch(xtreemfs::UnknownAddressSchemeException const &_e) {
    {
      jclass clazz = jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/XtreemFSException");
      jenv->ThrowNew(clazz, (&_e)->what());
      return ;
    }
  }
  catch(xtreemfs::XtreemFSException const &_e) {
    {
      jclass clazz = jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/XtreemFSException");
      jenv->ThrowNew(clazz, (&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_VolumeProxy_1makeDirectory(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2, jstring jarg3, jlong jarg4) {
  xtreemfs::Volume *arg1 = (xtreemfs::Volume *) 0 ;
  xtreemfs::pbrpc::UserCredentials *arg2 = 0 ;
  std::string *arg3 = 0 ;
  unsigned int arg4 ;
  xtreemfs::pbrpc::UserCredentials temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xtreemfs::Volume **)&jarg1; 
  {
    int proto_size = 0;
    boost::scoped_ptr<char> proto_buffer(
      JNIUtil::MakeCharArray(jenv, jarg2, &proto_size));
    
    bool parsed_ok = temp2.ParseFromArray(proto_buffer.get(), proto_size);
    if (!parsed_ok) {
      SWIG_JavaThrowException(jenv,
        SWIG_JavaRuntimeException,
        "Unable to parse xtreemfs::pbrpc::UserCredentials protocol message.");
    }
    arg2 = &temp2;
  }
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = (unsigned int)jarg4; 
  try {
    (arg1)->MakeDirectory((xtreemfs::pbrpc::UserCredentials const &)*arg2,(std::string const &)*arg3,arg4);
  }
  catch(xtreemfs::AddressToUUIDNotFoundException const &_e) {
    {
      jclass clazz =  jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/AddressToUUIDNotFoundException");
      jenv->ThrowNew(clazz, (&_e)->what());
      return ;
    }
  }
  catch(xtreemfs::IOException const &_e) {
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaIOException, (&_e)->what());
      return ;
    }
  }
  catch(xtreemfs::PosixErrorException const &_e) {
    {
      jclass clazz = jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/PosixErrorException");
      jmethodID mid = jenv->GetMethodID(clazz, "<init>", "(Lorg/xtreemfs/foundation/pbrpc/generatedinterfaces/RPC$POSIXErrno;Ljava/lang/String;)V");
      
      jclass clazz2 = jenv->FindClass("org/xtreemfs/foundation/pbrpc/generatedinterfaces/RPC$POSIXErrno");
      jmethodID mid2 = jenv->GetStaticMethodID(clazz2, "valueOf", "(I)Lorg/xtreemfs/foundation/pbrpc/generatedinterfaces/RPC$POSIXErrno;");
      
      jobject posix_errno = jenv->CallStaticObjectMethod(clazz2, mid2, (&_e)->posix_errno());
      jstring what = jenv->NewStringUTF((&_e)->what());
      jthrowable o = static_cast<jthrowable>(jenv->NewObject(clazz, mid, posix_errno, what));
      jenv->Throw(o);
      
      return ;
    }
  }
  catch(xtreemfs::UnknownAddressSchemeException const &_e) {
    {
      jclass clazz = jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/XtreemFSException");
      jenv->ThrowNew(clazz, (&_e)->what());
      return ;
    }
  }
  catch(xtreemfs::XtreemFSException const &_e) {
    {
      jclass clazz = jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/XtreemFSException");
      jenv->ThrowNew(clazz, (&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_VolumeProxy_1deleteDirectory(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2, jstring jarg3) {
  xtreemfs::Volume *arg1 = (xtreemfs::Volume *) 0 ;
  xtreemfs::pbrpc::UserCredentials *arg2 = 0 ;
  std::string *arg3 = 0 ;
  xtreemfs::pbrpc::UserCredentials temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xtreemfs::Volume **)&jarg1; 
  {
    int proto_size = 0;
    boost::scoped_ptr<char> proto_buffer(
      JNIUtil::MakeCharArray(jenv, jarg2, &proto_size));
    
    bool parsed_ok = temp2.ParseFromArray(proto_buffer.get(), proto_size);
    if (!parsed_ok) {
      SWIG_JavaThrowException(jenv,
        SWIG_JavaRuntimeException,
        "Unable to parse xtreemfs::pbrpc::UserCredentials protocol message.");
    }
    arg2 = &temp2;
  }
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  try {
    (arg1)->DeleteDirectory((xtreemfs::pbrpc::UserCredentials const &)*arg2,(std::string const &)*arg3);
  }
  catch(xtreemfs::AddressToUUIDNotFoundException const &_e) {
    {
      jclass clazz =  jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/AddressToUUIDNotFoundException");
      jenv->ThrowNew(clazz, (&_e)->what());
      return ;
    }
  }
  catch(xtreemfs::IOException const &_e) {
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaIOException, (&_e)->what());
      return ;
    }
  }
  catch(xtreemfs::PosixErrorException const &_e) {
    {
      jclass clazz = jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/PosixErrorException");
      jmethodID mid = jenv->GetMethodID(clazz, "<init>", "(Lorg/xtreemfs/foundation/pbrpc/generatedinterfaces/RPC$POSIXErrno;Ljava/lang/String;)V");
      
      jclass clazz2 = jenv->FindClass("org/xtreemfs/foundation/pbrpc/generatedinterfaces/RPC$POSIXErrno");
      jmethodID mid2 = jenv->GetStaticMethodID(clazz2, "valueOf", "(I)Lorg/xtreemfs/foundation/pbrpc/generatedinterfaces/RPC$POSIXErrno;");
      
      jobject posix_errno = jenv->CallStaticObjectMethod(clazz2, mid2, (&_e)->posix_errno());
      jstring what = jenv->NewStringUTF((&_e)->what());
      jthrowable o = static_cast<jthrowable>(jenv->NewObject(clazz, mid, posix_errno, what));
      jenv->Throw(o);
      
      return ;
    }
  }
  catch(xtreemfs::UnknownAddressSchemeException const &_e) {
    {
      jclass clazz = jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/XtreemFSException");
      jenv->ThrowNew(clazz, (&_e)->what());
      return ;
    }
  }
  catch(xtreemfs::XtreemFSException const &_e) {
    {
      jclass clazz = jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/XtreemFSException");
      jenv->ThrowNew(clazz, (&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT jbyteArray JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_VolumeProxy_1readDir(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2, jstring jarg3, jlong jarg4, jlong jarg5, jboolean jarg6) {
  jbyteArray jresult = 0 ;
  xtreemfs::Volume *arg1 = (xtreemfs::Volume *) 0 ;
  xtreemfs::pbrpc::UserCredentials *arg2 = 0 ;
  std::string *arg3 = 0 ;
  uint64_t arg4 ;
  uint32_t arg5 ;
  bool arg6 ;
  xtreemfs::pbrpc::UserCredentials temp2 ;
  xtreemfs::pbrpc::DirectoryEntries *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xtreemfs::Volume **)&jarg1; 
  {
    int proto_size = 0;
    boost::scoped_ptr<char> proto_buffer(
      JNIUtil::MakeCharArray(jenv, jarg2, &proto_size));
    
    bool parsed_ok = temp2.ParseFromArray(proto_buffer.get(), proto_size);
    if (!parsed_ok) {
      SWIG_JavaThrowException(jenv,
        SWIG_JavaRuntimeException,
        "Unable to parse xtreemfs::pbrpc::UserCredentials protocol message.");
    }
    arg2 = &temp2;
  }
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = (uint64_t)jarg4; 
  arg5 = (uint32_t)jarg5; 
  arg6 = jarg6 ? true : false; 
  try {
    result = (xtreemfs::pbrpc::DirectoryEntries *)(arg1)->ReadDir((xtreemfs::pbrpc::UserCredentials const &)*arg2,(std::string const &)*arg3,arg4,arg5,arg6);
  }
  catch(xtreemfs::AddressToUUIDNotFoundException const &_e) {
    {
      jclass clazz =  jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/AddressToUUIDNotFoundException");
      jenv->ThrowNew(clazz, (&_e)->what());
      return 0;
    }
  }
  catch(xtreemfs::IOException const &_e) {
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaIOException, (&_e)->what());
      return 0;
    }
  }
  catch(xtreemfs::PosixErrorException const &_e) {
    {
      jclass clazz = jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/PosixErrorException");
      jmethodID mid = jenv->GetMethodID(clazz, "<init>", "(Lorg/xtreemfs/foundation/pbrpc/generatedinterfaces/RPC$POSIXErrno;Ljava/lang/String;)V");
      
      jclass clazz2 = jenv->FindClass("org/xtreemfs/foundation/pbrpc/generatedinterfaces/RPC$POSIXErrno");
      jmethodID mid2 = jenv->GetStaticMethodID(clazz2, "valueOf", "(I)Lorg/xtreemfs/foundation/pbrpc/generatedinterfaces/RPC$POSIXErrno;");
      
      jobject posix_errno = jenv->CallStaticObjectMethod(clazz2, mid2, (&_e)->posix_errno());
      jstring what = jenv->NewStringUTF((&_e)->what());
      jthrowable o = static_cast<jthrowable>(jenv->NewObject(clazz, mid, posix_errno, what));
      jenv->Throw(o);
      
      return 0;
    }
  }
  catch(xtreemfs::UnknownAddressSchemeException const &_e) {
    {
      jclass clazz = jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/XtreemFSException");
      jenv->ThrowNew(clazz, (&_e)->what());
      return 0;
    }
  }
  catch(xtreemfs::XtreemFSException const &_e) {
    {
      jclass clazz = jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/XtreemFSException");
      jenv->ThrowNew(clazz, (&_e)->what());
      return 0;
    }
  }
  
  {
    boost::scoped_ptr<char> buf(new char[result->ByteSize()]);
    
    result->SerializeWithCachedSizesToArray(
      reinterpret_cast<google::protobuf::uint8*>(buf.get()));
    jresult = JNIUtil::MakeJByteArray(jenv, buf.get(), result->ByteSize());
    if (true) {
      // To prevent a memory leak.
      delete result;
      result = NULL;
    }
  }
  return jresult;
}


SWIGEXPORT jbyteArray JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_VolumeProxy_1listXAttrs_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2, jstring jarg3) {
  jbyteArray jresult = 0 ;
  xtreemfs::Volume *arg1 = (xtreemfs::Volume *) 0 ;
  xtreemfs::pbrpc::UserCredentials *arg2 = 0 ;
  std::string *arg3 = 0 ;
  xtreemfs::pbrpc::UserCredentials temp2 ;
  xtreemfs::pbrpc::listxattrResponse *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xtreemfs::Volume **)&jarg1; 
  {
    int proto_size = 0;
    boost::scoped_ptr<char> proto_buffer(
      JNIUtil::MakeCharArray(jenv, jarg2, &proto_size));
    
    bool parsed_ok = temp2.ParseFromArray(proto_buffer.get(), proto_size);
    if (!parsed_ok) {
      SWIG_JavaThrowException(jenv,
        SWIG_JavaRuntimeException,
        "Unable to parse xtreemfs::pbrpc::UserCredentials protocol message.");
    }
    arg2 = &temp2;
  }
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  try {
    result = (xtreemfs::pbrpc::listxattrResponse *)(arg1)->ListXAttrs((xtreemfs::pbrpc::UserCredentials const &)*arg2,(std::string const &)*arg3);
  }
  catch(xtreemfs::AddressToUUIDNotFoundException const &_e) {
    {
      jclass clazz =  jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/AddressToUUIDNotFoundException");
      jenv->ThrowNew(clazz, (&_e)->what());
      return 0;
    }
  }
  catch(xtreemfs::IOException const &_e) {
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaIOException, (&_e)->what());
      return 0;
    }
  }
  catch(xtreemfs::PosixErrorException const &_e) {
    {
      jclass clazz = jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/PosixErrorException");
      jmethodID mid = jenv->GetMethodID(clazz, "<init>", "(Lorg/xtreemfs/foundation/pbrpc/generatedinterfaces/RPC$POSIXErrno;Ljava/lang/String;)V");
      
      jclass clazz2 = jenv->FindClass("org/xtreemfs/foundation/pbrpc/generatedinterfaces/RPC$POSIXErrno");
      jmethodID mid2 = jenv->GetStaticMethodID(clazz2, "valueOf", "(I)Lorg/xtreemfs/foundation/pbrpc/generatedinterfaces/RPC$POSIXErrno;");
      
      jobject posix_errno = jenv->CallStaticObjectMethod(clazz2, mid2, (&_e)->posix_errno());
      jstring what = jenv->NewStringUTF((&_e)->what());
      jthrowable o = static_cast<jthrowable>(jenv->NewObject(clazz, mid, posix_errno, what));
      jenv->Throw(o);
      
      return 0;
    }
  }
  catch(xtreemfs::UnknownAddressSchemeException const &_e) {
    {
      jclass clazz = jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/XtreemFSException");
      jenv->ThrowNew(clazz, (&_e)->what());
      return 0;
    }
  }
  catch(xtreemfs::XtreemFSException const &_e) {
    {
      jclass clazz = jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/XtreemFSException");
      jenv->ThrowNew(clazz, (&_e)->what());
      return 0;
    }
  }
  
  {
    boost::scoped_ptr<char> buf(new char[result->ByteSize()]);
    
    result->SerializeWithCachedSizesToArray(
      reinterpret_cast<google::protobuf::uint8*>(buf.get()));
    jresult = JNIUtil::MakeJByteArray(jenv, buf.get(), result->ByteSize());
    if (true) {
      // To prevent a memory leak.
      delete result;
      result = NULL;
    }
  }
  return jresult;
}


SWIGEXPORT jbyteArray JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_VolumeProxy_1listXAttrs_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2, jstring jarg3, jboolean jarg4) {
  jbyteArray jresult = 0 ;
  xtreemfs::Volume *arg1 = (xtreemfs::Volume *) 0 ;
  xtreemfs::pbrpc::UserCredentials *arg2 = 0 ;
  std::string *arg3 = 0 ;
  bool arg4 ;
  xtreemfs::pbrpc::UserCredentials temp2 ;
  xtreemfs::pbrpc::listxattrResponse *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xtreemfs::Volume **)&jarg1; 
  {
    int proto_size = 0;
    boost::scoped_ptr<char> proto_buffer(
      JNIUtil::MakeCharArray(jenv, jarg2, &proto_size));
    
    bool parsed_ok = temp2.ParseFromArray(proto_buffer.get(), proto_size);
    if (!parsed_ok) {
      SWIG_JavaThrowException(jenv,
        SWIG_JavaRuntimeException,
        "Unable to parse xtreemfs::pbrpc::UserCredentials protocol message.");
    }
    arg2 = &temp2;
  }
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = jarg4 ? true : false; 
  try {
    result = (xtreemfs::pbrpc::listxattrResponse *)(arg1)->ListXAttrs((xtreemfs::pbrpc::UserCredentials const &)*arg2,(std::string const &)*arg3,arg4);
  }
  catch(xtreemfs::AddressToUUIDNotFoundException const &_e) {
    {
      jclass clazz =  jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/AddressToUUIDNotFoundException");
      jenv->ThrowNew(clazz, (&_e)->what());
      return 0;
    }
  }
  catch(xtreemfs::IOException const &_e) {
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaIOException, (&_e)->what());
      return 0;
    }
  }
  catch(xtreemfs::PosixErrorException const &_e) {
    {
      jclass clazz = jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/PosixErrorException");
      jmethodID mid = jenv->GetMethodID(clazz, "<init>", "(Lorg/xtreemfs/foundation/pbrpc/generatedinterfaces/RPC$POSIXErrno;Ljava/lang/String;)V");
      
      jclass clazz2 = jenv->FindClass("org/xtreemfs/foundation/pbrpc/generatedinterfaces/RPC$POSIXErrno");
      jmethodID mid2 = jenv->GetStaticMethodID(clazz2, "valueOf", "(I)Lorg/xtreemfs/foundation/pbrpc/generatedinterfaces/RPC$POSIXErrno;");
      
      jobject posix_errno = jenv->CallStaticObjectMethod(clazz2, mid2, (&_e)->posix_errno());
      jstring what = jenv->NewStringUTF((&_e)->what());
      jthrowable o = static_cast<jthrowable>(jenv->NewObject(clazz, mid, posix_errno, what));
      jenv->Throw(o);
      
      return 0;
    }
  }
  catch(xtreemfs::UnknownAddressSchemeException const &_e) {
    {
      jclass clazz = jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/XtreemFSException");
      jenv->ThrowNew(clazz, (&_e)->what());
      return 0;
    }
  }
  catch(xtreemfs::XtreemFSException const &_e) {
    {
      jclass clazz = jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/XtreemFSException");
      jenv->ThrowNew(clazz, (&_e)->what());
      return 0;
    }
  }
  
  {
    boost::scoped_ptr<char> buf(new char[result->ByteSize()]);
    
    result->SerializeWithCachedSizesToArray(
      reinterpret_cast<google::protobuf::uint8*>(buf.get()));
    jresult = JNIUtil::MakeJByteArray(jenv, buf.get(), result->ByteSize());
    if (true) {
      // To prevent a memory leak.
      delete result;
      result = NULL;
    }
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_VolumeProxy_1setXAttr(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2, jstring jarg3, jstring jarg4, jstring jarg5, jint jarg6) {
  xtreemfs::Volume *arg1 = (xtreemfs::Volume *) 0 ;
  xtreemfs::pbrpc::UserCredentials *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  xtreemfs::pbrpc::XATTR_FLAGS arg6 ;
  xtreemfs::pbrpc::UserCredentials temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xtreemfs::Volume **)&jarg1; 
  {
    int proto_size = 0;
    boost::scoped_ptr<char> proto_buffer(
      JNIUtil::MakeCharArray(jenv, jarg2, &proto_size));
    
    bool parsed_ok = temp2.ParseFromArray(proto_buffer.get(), proto_size);
    if (!parsed_ok) {
      SWIG_JavaThrowException(jenv,
        SWIG_JavaRuntimeException,
        "Unable to parse xtreemfs::pbrpc::UserCredentials protocol message.");
    }
    arg2 = &temp2;
  }
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg5_pstr = (const char *)jenv->GetStringUTFChars(jarg5, 0); 
  if (!arg5_pstr) return ;
  std::string arg5_str(arg5_pstr);
  arg5 = &arg5_str;
  jenv->ReleaseStringUTFChars(jarg5, arg5_pstr); 
  {
    if (! xtreemfs::pbrpc::XATTR_FLAGS_IsValid(jarg6)) {
      SWIG_JavaThrowException(jenv,
        SWIG_JavaRuntimeException,
        "Unable to parse xtreemfs::pbrpc::XATTR_FLAGS enum.");
    }
    arg6 = static_cast<xtreemfs::pbrpc::XATTR_FLAGS>(jarg6);
  }
  try {
    (arg1)->SetXAttr((xtreemfs::pbrpc::UserCredentials const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5,arg6);
  }
  catch(xtreemfs::AddressToUUIDNotFoundException const &_e) {
    {
      jclass clazz =  jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/AddressToUUIDNotFoundException");
      jenv->ThrowNew(clazz, (&_e)->what());
      return ;
    }
  }
  catch(xtreemfs::IOException const &_e) {
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaIOException, (&_e)->what());
      return ;
    }
  }
  catch(xtreemfs::PosixErrorException const &_e) {
    {
      jclass clazz = jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/PosixErrorException");
      jmethodID mid = jenv->GetMethodID(clazz, "<init>", "(Lorg/xtreemfs/foundation/pbrpc/generatedinterfaces/RPC$POSIXErrno;Ljava/lang/String;)V");
      
      jclass clazz2 = jenv->FindClass("org/xtreemfs/foundation/pbrpc/generatedinterfaces/RPC$POSIXErrno");
      jmethodID mid2 = jenv->GetStaticMethodID(clazz2, "valueOf", "(I)Lorg/xtreemfs/foundation/pbrpc/generatedinterfaces/RPC$POSIXErrno;");
      
      jobject posix_errno = jenv->CallStaticObjectMethod(clazz2, mid2, (&_e)->posix_errno());
      jstring what = jenv->NewStringUTF((&_e)->what());
      jthrowable o = static_cast<jthrowable>(jenv->NewObject(clazz, mid, posix_errno, what));
      jenv->Throw(o);
      
      return ;
    }
  }
  catch(xtreemfs::UnknownAddressSchemeException const &_e) {
    {
      jclass clazz = jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/XtreemFSException");
      jenv->ThrowNew(clazz, (&_e)->what());
      return ;
    }
  }
  catch(xtreemfs::XtreemFSException const &_e) {
    {
      jclass clazz = jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/XtreemFSException");
      jenv->ThrowNew(clazz, (&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT jboolean JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_VolumeProxy_1getXAttr(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2, jstring jarg3, jstring jarg4, jobjectArray jarg5) {
  jboolean jresult = 0 ;
  xtreemfs::Volume *arg1 = (xtreemfs::Volume *) 0 ;
  xtreemfs::pbrpc::UserCredentials *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = (std::string *) 0 ;
  xtreemfs::pbrpc::UserCredentials temp2 ;
  std::string temp5 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xtreemfs::Volume **)&jarg1; 
  {
    int proto_size = 0;
    boost::scoped_ptr<char> proto_buffer(
      JNIUtil::MakeCharArray(jenv, jarg2, &proto_size));
    
    bool parsed_ok = temp2.ParseFromArray(proto_buffer.get(), proto_size);
    if (!parsed_ok) {
      SWIG_JavaThrowException(jenv,
        SWIG_JavaRuntimeException,
        "Unable to parse xtreemfs::pbrpc::UserCredentials protocol message.");
    }
    arg2 = &temp2;
  }
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  {
    if (!jarg5) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return 0;
    }
    if (jenv->GetArrayLength(jarg5) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return 0;
    }
    arg5 = &temp5; 
  }
  try {
    result = (bool)(arg1)->GetXAttr((xtreemfs::pbrpc::UserCredentials const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,arg5);
  }
  catch(xtreemfs::AddressToUUIDNotFoundException const &_e) {
    {
      jclass clazz =  jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/AddressToUUIDNotFoundException");
      jenv->ThrowNew(clazz, (&_e)->what());
      return 0;
    }
  }
  catch(xtreemfs::IOException const &_e) {
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaIOException, (&_e)->what());
      return 0;
    }
  }
  catch(xtreemfs::PosixErrorException const &_e) {
    {
      jclass clazz = jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/PosixErrorException");
      jmethodID mid = jenv->GetMethodID(clazz, "<init>", "(Lorg/xtreemfs/foundation/pbrpc/generatedinterfaces/RPC$POSIXErrno;Ljava/lang/String;)V");
      
      jclass clazz2 = jenv->FindClass("org/xtreemfs/foundation/pbrpc/generatedinterfaces/RPC$POSIXErrno");
      jmethodID mid2 = jenv->GetStaticMethodID(clazz2, "valueOf", "(I)Lorg/xtreemfs/foundation/pbrpc/generatedinterfaces/RPC$POSIXErrno;");
      
      jobject posix_errno = jenv->CallStaticObjectMethod(clazz2, mid2, (&_e)->posix_errno());
      jstring what = jenv->NewStringUTF((&_e)->what());
      jthrowable o = static_cast<jthrowable>(jenv->NewObject(clazz, mid, posix_errno, what));
      jenv->Throw(o);
      
      return 0;
    }
  }
  catch(xtreemfs::UnknownAddressSchemeException const &_e) {
    {
      jclass clazz = jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/XtreemFSException");
      jenv->ThrowNew(clazz, (&_e)->what());
      return 0;
    }
  }
  catch(xtreemfs::XtreemFSException const &_e) {
    {
      jclass clazz = jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/XtreemFSException");
      jenv->ThrowNew(clazz, (&_e)->what());
      return 0;
    }
  }
  
  jresult = (jboolean)result; 
  {
    jstring jvalue = jenv->NewStringUTF(temp5.c_str()); 
    jenv->SetObjectArrayElement(jarg5, 0, jvalue);
  }
  
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_VolumeProxy_1getXAttrSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2, jstring jarg3, jstring jarg4, jintArray jarg5) {
  jboolean jresult = 0 ;
  xtreemfs::Volume *arg1 = (xtreemfs::Volume *) 0 ;
  xtreemfs::pbrpc::UserCredentials *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  int *arg5 = (int *) 0 ;
  xtreemfs::pbrpc::UserCredentials temp2 ;
  int temp5 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xtreemfs::Volume **)&jarg1; 
  {
    int proto_size = 0;
    boost::scoped_ptr<char> proto_buffer(
      JNIUtil::MakeCharArray(jenv, jarg2, &proto_size));
    
    bool parsed_ok = temp2.ParseFromArray(proto_buffer.get(), proto_size);
    if (!parsed_ok) {
      SWIG_JavaThrowException(jenv,
        SWIG_JavaRuntimeException,
        "Unable to parse xtreemfs::pbrpc::UserCredentials protocol message.");
    }
    arg2 = &temp2;
  }
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  {
    if (!jarg5) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return 0;
    }
    if (jenv->GetArrayLength(jarg5) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return 0;
    }
    temp5 = (int)0;
    arg5 = &temp5; 
  }
  try {
    result = (bool)(arg1)->GetXAttrSize((xtreemfs::pbrpc::UserCredentials const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,arg5);
  }
  catch(xtreemfs::AddressToUUIDNotFoundException const &_e) {
    {
      jclass clazz =  jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/AddressToUUIDNotFoundException");
      jenv->ThrowNew(clazz, (&_e)->what());
      return 0;
    }
  }
  catch(xtreemfs::IOException const &_e) {
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaIOException, (&_e)->what());
      return 0;
    }
  }
  catch(xtreemfs::PosixErrorException const &_e) {
    {
      jclass clazz = jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/PosixErrorException");
      jmethodID mid = jenv->GetMethodID(clazz, "<init>", "(Lorg/xtreemfs/foundation/pbrpc/generatedinterfaces/RPC$POSIXErrno;Ljava/lang/String;)V");
      
      jclass clazz2 = jenv->FindClass("org/xtreemfs/foundation/pbrpc/generatedinterfaces/RPC$POSIXErrno");
      jmethodID mid2 = jenv->GetStaticMethodID(clazz2, "valueOf", "(I)Lorg/xtreemfs/foundation/pbrpc/generatedinterfaces/RPC$POSIXErrno;");
      
      jobject posix_errno = jenv->CallStaticObjectMethod(clazz2, mid2, (&_e)->posix_errno());
      jstring what = jenv->NewStringUTF((&_e)->what());
      jthrowable o = static_cast<jthrowable>(jenv->NewObject(clazz, mid, posix_errno, what));
      jenv->Throw(o);
      
      return 0;
    }
  }
  catch(xtreemfs::UnknownAddressSchemeException const &_e) {
    {
      jclass clazz = jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/XtreemFSException");
      jenv->ThrowNew(clazz, (&_e)->what());
      return 0;
    }
  }
  catch(xtreemfs::XtreemFSException const &_e) {
    {
      jclass clazz = jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/XtreemFSException");
      jenv->ThrowNew(clazz, (&_e)->what());
      return 0;
    }
  }
  
  jresult = (jboolean)result; 
  {
    jint jvalue = (jint)temp5;
    jenv->SetIntArrayRegion(jarg5, 0, 1, &jvalue);
  }
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_VolumeProxy_1removeXAttr(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2, jstring jarg3, jstring jarg4) {
  xtreemfs::Volume *arg1 = (xtreemfs::Volume *) 0 ;
  xtreemfs::pbrpc::UserCredentials *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  xtreemfs::pbrpc::UserCredentials temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xtreemfs::Volume **)&jarg1; 
  {
    int proto_size = 0;
    boost::scoped_ptr<char> proto_buffer(
      JNIUtil::MakeCharArray(jenv, jarg2, &proto_size));
    
    bool parsed_ok = temp2.ParseFromArray(proto_buffer.get(), proto_size);
    if (!parsed_ok) {
      SWIG_JavaThrowException(jenv,
        SWIG_JavaRuntimeException,
        "Unable to parse xtreemfs::pbrpc::UserCredentials protocol message.");
    }
    arg2 = &temp2;
  }
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  try {
    (arg1)->RemoveXAttr((xtreemfs::pbrpc::UserCredentials const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
  }
  catch(xtreemfs::AddressToUUIDNotFoundException const &_e) {
    {
      jclass clazz =  jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/AddressToUUIDNotFoundException");
      jenv->ThrowNew(clazz, (&_e)->what());
      return ;
    }
  }
  catch(xtreemfs::IOException const &_e) {
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaIOException, (&_e)->what());
      return ;
    }
  }
  catch(xtreemfs::PosixErrorException const &_e) {
    {
      jclass clazz = jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/PosixErrorException");
      jmethodID mid = jenv->GetMethodID(clazz, "<init>", "(Lorg/xtreemfs/foundation/pbrpc/generatedinterfaces/RPC$POSIXErrno;Ljava/lang/String;)V");
      
      jclass clazz2 = jenv->FindClass("org/xtreemfs/foundation/pbrpc/generatedinterfaces/RPC$POSIXErrno");
      jmethodID mid2 = jenv->GetStaticMethodID(clazz2, "valueOf", "(I)Lorg/xtreemfs/foundation/pbrpc/generatedinterfaces/RPC$POSIXErrno;");
      
      jobject posix_errno = jenv->CallStaticObjectMethod(clazz2, mid2, (&_e)->posix_errno());
      jstring what = jenv->NewStringUTF((&_e)->what());
      jthrowable o = static_cast<jthrowable>(jenv->NewObject(clazz, mid, posix_errno, what));
      jenv->Throw(o);
      
      return ;
    }
  }
  catch(xtreemfs::UnknownAddressSchemeException const &_e) {
    {
      jclass clazz = jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/XtreemFSException");
      jenv->ThrowNew(clazz, (&_e)->what());
      return ;
    }
  }
  catch(xtreemfs::XtreemFSException const &_e) {
    {
      jclass clazz = jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/XtreemFSException");
      jenv->ThrowNew(clazz, (&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_VolumeProxy_1addReplica(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2, jstring jarg3, jbyteArray jarg4) {
  xtreemfs::Volume *arg1 = (xtreemfs::Volume *) 0 ;
  xtreemfs::pbrpc::UserCredentials *arg2 = 0 ;
  std::string *arg3 = 0 ;
  xtreemfs::pbrpc::Replica *arg4 = 0 ;
  xtreemfs::pbrpc::UserCredentials temp2 ;
  xtreemfs::pbrpc::Replica temp4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xtreemfs::Volume **)&jarg1; 
  {
    int proto_size = 0;
    boost::scoped_ptr<char> proto_buffer(
      JNIUtil::MakeCharArray(jenv, jarg2, &proto_size));
    
    bool parsed_ok = temp2.ParseFromArray(proto_buffer.get(), proto_size);
    if (!parsed_ok) {
      SWIG_JavaThrowException(jenv,
        SWIG_JavaRuntimeException,
        "Unable to parse xtreemfs::pbrpc::UserCredentials protocol message.");
    }
    arg2 = &temp2;
  }
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  {
    int proto_size = 0;
    boost::scoped_ptr<char> proto_buffer(
      JNIUtil::MakeCharArray(jenv, jarg4, &proto_size));
    
    bool parsed_ok = temp4.ParseFromArray(proto_buffer.get(), proto_size);
    if (!parsed_ok) {
      SWIG_JavaThrowException(jenv,
        SWIG_JavaRuntimeException,
        "Unable to parse xtreemfs::pbrpc::Replica protocol message.");
    }
    arg4 = &temp4;
  }
  try {
    (arg1)->AddReplica((xtreemfs::pbrpc::UserCredentials const &)*arg2,(std::string const &)*arg3,(xtreemfs::pbrpc::Replica const &)*arg4);
  }
  catch(xtreemfs::AddressToUUIDNotFoundException const &_e) {
    {
      jclass clazz =  jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/AddressToUUIDNotFoundException");
      jenv->ThrowNew(clazz, (&_e)->what());
      return ;
    }
  }
  catch(xtreemfs::IOException const &_e) {
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaIOException, (&_e)->what());
      return ;
    }
  }
  catch(xtreemfs::PosixErrorException const &_e) {
    {
      jclass clazz = jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/PosixErrorException");
      jmethodID mid = jenv->GetMethodID(clazz, "<init>", "(Lorg/xtreemfs/foundation/pbrpc/generatedinterfaces/RPC$POSIXErrno;Ljava/lang/String;)V");
      
      jclass clazz2 = jenv->FindClass("org/xtreemfs/foundation/pbrpc/generatedinterfaces/RPC$POSIXErrno");
      jmethodID mid2 = jenv->GetStaticMethodID(clazz2, "valueOf", "(I)Lorg/xtreemfs/foundation/pbrpc/generatedinterfaces/RPC$POSIXErrno;");
      
      jobject posix_errno = jenv->CallStaticObjectMethod(clazz2, mid2, (&_e)->posix_errno());
      jstring what = jenv->NewStringUTF((&_e)->what());
      jthrowable o = static_cast<jthrowable>(jenv->NewObject(clazz, mid, posix_errno, what));
      jenv->Throw(o);
      
      return ;
    }
  }
  catch(xtreemfs::UnknownAddressSchemeException const &_e) {
    {
      jclass clazz = jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/XtreemFSException");
      jenv->ThrowNew(clazz, (&_e)->what());
      return ;
    }
  }
  catch(xtreemfs::XtreemFSException const &_e) {
    {
      jclass clazz = jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/XtreemFSException");
      jenv->ThrowNew(clazz, (&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT jbyteArray JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_VolumeProxy_1listReplicas(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2, jstring jarg3) {
  jbyteArray jresult = 0 ;
  xtreemfs::Volume *arg1 = (xtreemfs::Volume *) 0 ;
  xtreemfs::pbrpc::UserCredentials *arg2 = 0 ;
  std::string *arg3 = 0 ;
  xtreemfs::pbrpc::UserCredentials temp2 ;
  xtreemfs::pbrpc::Replicas *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xtreemfs::Volume **)&jarg1; 
  {
    int proto_size = 0;
    boost::scoped_ptr<char> proto_buffer(
      JNIUtil::MakeCharArray(jenv, jarg2, &proto_size));
    
    bool parsed_ok = temp2.ParseFromArray(proto_buffer.get(), proto_size);
    if (!parsed_ok) {
      SWIG_JavaThrowException(jenv,
        SWIG_JavaRuntimeException,
        "Unable to parse xtreemfs::pbrpc::UserCredentials protocol message.");
    }
    arg2 = &temp2;
  }
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  try {
    result = (xtreemfs::pbrpc::Replicas *)(arg1)->ListReplicas((xtreemfs::pbrpc::UserCredentials const &)*arg2,(std::string const &)*arg3);
  }
  catch(xtreemfs::AddressToUUIDNotFoundException const &_e) {
    {
      jclass clazz =  jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/AddressToUUIDNotFoundException");
      jenv->ThrowNew(clazz, (&_e)->what());
      return 0;
    }
  }
  catch(xtreemfs::IOException const &_e) {
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaIOException, (&_e)->what());
      return 0;
    }
  }
  catch(xtreemfs::PosixErrorException const &_e) {
    {
      jclass clazz = jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/PosixErrorException");
      jmethodID mid = jenv->GetMethodID(clazz, "<init>", "(Lorg/xtreemfs/foundation/pbrpc/generatedinterfaces/RPC$POSIXErrno;Ljava/lang/String;)V");
      
      jclass clazz2 = jenv->FindClass("org/xtreemfs/foundation/pbrpc/generatedinterfaces/RPC$POSIXErrno");
      jmethodID mid2 = jenv->GetStaticMethodID(clazz2, "valueOf", "(I)Lorg/xtreemfs/foundation/pbrpc/generatedinterfaces/RPC$POSIXErrno;");
      
      jobject posix_errno = jenv->CallStaticObjectMethod(clazz2, mid2, (&_e)->posix_errno());
      jstring what = jenv->NewStringUTF((&_e)->what());
      jthrowable o = static_cast<jthrowable>(jenv->NewObject(clazz, mid, posix_errno, what));
      jenv->Throw(o);
      
      return 0;
    }
  }
  catch(xtreemfs::UnknownAddressSchemeException const &_e) {
    {
      jclass clazz = jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/XtreemFSException");
      jenv->ThrowNew(clazz, (&_e)->what());
      return 0;
    }
  }
  catch(xtreemfs::XtreemFSException const &_e) {
    {
      jclass clazz = jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/XtreemFSException");
      jenv->ThrowNew(clazz, (&_e)->what());
      return 0;
    }
  }
  
  {
    boost::scoped_ptr<char> buf(new char[result->ByteSize()]);
    
    result->SerializeWithCachedSizesToArray(
      reinterpret_cast<google::protobuf::uint8*>(buf.get()));
    jresult = JNIUtil::MakeJByteArray(jenv, buf.get(), result->ByteSize());
    if (true) {
      // To prevent a memory leak.
      delete result;
      result = NULL;
    }
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_VolumeProxy_1removeReplica(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2, jstring jarg3, jstring jarg4) {
  xtreemfs::Volume *arg1 = (xtreemfs::Volume *) 0 ;
  xtreemfs::pbrpc::UserCredentials *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  xtreemfs::pbrpc::UserCredentials temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xtreemfs::Volume **)&jarg1; 
  {
    int proto_size = 0;
    boost::scoped_ptr<char> proto_buffer(
      JNIUtil::MakeCharArray(jenv, jarg2, &proto_size));
    
    bool parsed_ok = temp2.ParseFromArray(proto_buffer.get(), proto_size);
    if (!parsed_ok) {
      SWIG_JavaThrowException(jenv,
        SWIG_JavaRuntimeException,
        "Unable to parse xtreemfs::pbrpc::UserCredentials protocol message.");
    }
    arg2 = &temp2;
  }
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  try {
    (arg1)->RemoveReplica((xtreemfs::pbrpc::UserCredentials const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
  }
  catch(xtreemfs::AddressToUUIDNotFoundException const &_e) {
    {
      jclass clazz =  jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/AddressToUUIDNotFoundException");
      jenv->ThrowNew(clazz, (&_e)->what());
      return ;
    }
  }
  catch(xtreemfs::IOException const &_e) {
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaIOException, (&_e)->what());
      return ;
    }
  }
  catch(xtreemfs::PosixErrorException const &_e) {
    {
      jclass clazz = jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/PosixErrorException");
      jmethodID mid = jenv->GetMethodID(clazz, "<init>", "(Lorg/xtreemfs/foundation/pbrpc/generatedinterfaces/RPC$POSIXErrno;Ljava/lang/String;)V");
      
      jclass clazz2 = jenv->FindClass("org/xtreemfs/foundation/pbrpc/generatedinterfaces/RPC$POSIXErrno");
      jmethodID mid2 = jenv->GetStaticMethodID(clazz2, "valueOf", "(I)Lorg/xtreemfs/foundation/pbrpc/generatedinterfaces/RPC$POSIXErrno;");
      
      jobject posix_errno = jenv->CallStaticObjectMethod(clazz2, mid2, (&_e)->posix_errno());
      jstring what = jenv->NewStringUTF((&_e)->what());
      jthrowable o = static_cast<jthrowable>(jenv->NewObject(clazz, mid, posix_errno, what));
      jenv->Throw(o);
      
      return ;
    }
  }
  catch(xtreemfs::UnknownAddressSchemeException const &_e) {
    {
      jclass clazz = jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/XtreemFSException");
      jenv->ThrowNew(clazz, (&_e)->what());
      return ;
    }
  }
  catch(xtreemfs::XtreemFSException const &_e) {
    {
      jclass clazz = jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/XtreemFSException");
      jenv->ThrowNew(clazz, (&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_VolumeProxy_1getSuitableOSDs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2, jstring jarg3, jint jarg4, jlong jarg5, jobject jarg5_) {
  xtreemfs::Volume *arg1 = (xtreemfs::Volume *) 0 ;
  xtreemfs::pbrpc::UserCredentials *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int arg4 ;
  std::list< std::string > *arg5 = (std::list< std::string > *) 0 ;
  xtreemfs::pbrpc::UserCredentials temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg5_;
  arg1 = *(xtreemfs::Volume **)&jarg1; 
  {
    int proto_size = 0;
    boost::scoped_ptr<char> proto_buffer(
      JNIUtil::MakeCharArray(jenv, jarg2, &proto_size));
    
    bool parsed_ok = temp2.ParseFromArray(proto_buffer.get(), proto_size);
    if (!parsed_ok) {
      SWIG_JavaThrowException(jenv,
        SWIG_JavaRuntimeException,
        "Unable to parse xtreemfs::pbrpc::UserCredentials protocol message.");
    }
    arg2 = &temp2;
  }
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = (int)jarg4; 
  arg5 = *(std::list< std::string > **)&jarg5; 
  try {
    (arg1)->GetSuitableOSDs((xtreemfs::pbrpc::UserCredentials const &)*arg2,(std::string const &)*arg3,arg4,arg5);
  }
  catch(xtreemfs::AddressToUUIDNotFoundException const &_e) {
    {
      jclass clazz =  jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/AddressToUUIDNotFoundException");
      jenv->ThrowNew(clazz, (&_e)->what());
      return ;
    }
  }
  catch(xtreemfs::IOException const &_e) {
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaIOException, (&_e)->what());
      return ;
    }
  }
  catch(xtreemfs::PosixErrorException const &_e) {
    {
      jclass clazz = jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/PosixErrorException");
      jmethodID mid = jenv->GetMethodID(clazz, "<init>", "(Lorg/xtreemfs/foundation/pbrpc/generatedinterfaces/RPC$POSIXErrno;Ljava/lang/String;)V");
      
      jclass clazz2 = jenv->FindClass("org/xtreemfs/foundation/pbrpc/generatedinterfaces/RPC$POSIXErrno");
      jmethodID mid2 = jenv->GetStaticMethodID(clazz2, "valueOf", "(I)Lorg/xtreemfs/foundation/pbrpc/generatedinterfaces/RPC$POSIXErrno;");
      
      jobject posix_errno = jenv->CallStaticObjectMethod(clazz2, mid2, (&_e)->posix_errno());
      jstring what = jenv->NewStringUTF((&_e)->what());
      jthrowable o = static_cast<jthrowable>(jenv->NewObject(clazz, mid, posix_errno, what));
      jenv->Throw(o);
      
      return ;
    }
  }
  catch(xtreemfs::UnknownAddressSchemeException const &_e) {
    {
      jclass clazz = jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/XtreemFSException");
      jenv->ThrowNew(clazz, (&_e)->what());
      return ;
    }
  }
  catch(xtreemfs::XtreemFSException const &_e) {
    {
      jclass clazz = jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/XtreemFSException");
      jenv->ThrowNew(clazz, (&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_delete_1FileHandleProxy(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  xtreemfs::FileHandle *arg1 = (xtreemfs::FileHandle *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(xtreemfs::FileHandle **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_FileHandleProxy_1read_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2, jint jarg3, jlong jarg4) {
  jint jresult = 0 ;
  xtreemfs::FileHandle *arg1 = (xtreemfs::FileHandle *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  int64_t arg4 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xtreemfs::FileHandle **)&jarg1; 
  {
    arg2 = (char *) jenv->GetByteArrayElements(jarg2, 0); 
  }
  arg3 = (size_t)jarg3; 
  arg4 = (int64_t)jarg4; 
  try {
    result = (int)(arg1)->Read(arg2,arg3,arg4);
  }
  catch(xtreemfs::AddressToUUIDNotFoundException const &_e) {
    {
      jclass clazz =  jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/AddressToUUIDNotFoundException");
      jenv->ThrowNew(clazz, (&_e)->what());
      return 0;
    }
  }
  catch(xtreemfs::IOException const &_e) {
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaIOException, (&_e)->what());
      return 0;
    }
  }
  catch(xtreemfs::PosixErrorException const &_e) {
    {
      jclass clazz = jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/PosixErrorException");
      jmethodID mid = jenv->GetMethodID(clazz, "<init>", "(Lorg/xtreemfs/foundation/pbrpc/generatedinterfaces/RPC$POSIXErrno;Ljava/lang/String;)V");
      
      jclass clazz2 = jenv->FindClass("org/xtreemfs/foundation/pbrpc/generatedinterfaces/RPC$POSIXErrno");
      jmethodID mid2 = jenv->GetStaticMethodID(clazz2, "valueOf", "(I)Lorg/xtreemfs/foundation/pbrpc/generatedinterfaces/RPC$POSIXErrno;");
      
      jobject posix_errno = jenv->CallStaticObjectMethod(clazz2, mid2, (&_e)->posix_errno());
      jstring what = jenv->NewStringUTF((&_e)->what());
      jthrowable o = static_cast<jthrowable>(jenv->NewObject(clazz, mid, posix_errno, what));
      jenv->Throw(o);
      
      return 0;
    }
  }
  catch(xtreemfs::UnknownAddressSchemeException const &_e) {
    {
      jclass clazz = jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/XtreemFSException");
      jenv->ThrowNew(clazz, (&_e)->what());
      return 0;
    }
  }
  catch(xtreemfs::XtreemFSException const &_e) {
    {
      jclass clazz = jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/XtreemFSException");
      jenv->ThrowNew(clazz, (&_e)->what());
      return 0;
    }
  }
  
  jresult = (jint)result; 
  {
    jenv->ReleaseByteArrayElements(jarg2, (jbyte *) arg2, 0); 
  }
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_FileHandleProxy_1write_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2, jint jarg3, jlong jarg4) {
  jint jresult = 0 ;
  xtreemfs::FileHandle *arg1 = (xtreemfs::FileHandle *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  int64_t arg4 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xtreemfs::FileHandle **)&jarg1; 
  {
    arg2 = (char *) jenv->GetByteArrayElements(jarg2, 0); 
  }
  arg3 = (size_t)jarg3; 
  arg4 = (int64_t)jarg4; 
  try {
    result = (int)(arg1)->Write((char const *)arg2,arg3,arg4);
  }
  catch(xtreemfs::AddressToUUIDNotFoundException const &_e) {
    {
      jclass clazz =  jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/AddressToUUIDNotFoundException");
      jenv->ThrowNew(clazz, (&_e)->what());
      return 0;
    }
  }
  catch(xtreemfs::IOException const &_e) {
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaIOException, (&_e)->what());
      return 0;
    }
  }
  catch(xtreemfs::PosixErrorException const &_e) {
    {
      jclass clazz = jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/PosixErrorException");
      jmethodID mid = jenv->GetMethodID(clazz, "<init>", "(Lorg/xtreemfs/foundation/pbrpc/generatedinterfaces/RPC$POSIXErrno;Ljava/lang/String;)V");
      
      jclass clazz2 = jenv->FindClass("org/xtreemfs/foundation/pbrpc/generatedinterfaces/RPC$POSIXErrno");
      jmethodID mid2 = jenv->GetStaticMethodID(clazz2, "valueOf", "(I)Lorg/xtreemfs/foundation/pbrpc/generatedinterfaces/RPC$POSIXErrno;");
      
      jobject posix_errno = jenv->CallStaticObjectMethod(clazz2, mid2, (&_e)->posix_errno());
      jstring what = jenv->NewStringUTF((&_e)->what());
      jthrowable o = static_cast<jthrowable>(jenv->NewObject(clazz, mid, posix_errno, what));
      jenv->Throw(o);
      
      return 0;
    }
  }
  catch(xtreemfs::UnknownAddressSchemeException const &_e) {
    {
      jclass clazz = jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/XtreemFSException");
      jenv->ThrowNew(clazz, (&_e)->what());
      return 0;
    }
  }
  catch(xtreemfs::XtreemFSException const &_e) {
    {
      jclass clazz = jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/XtreemFSException");
      jenv->ThrowNew(clazz, (&_e)->what());
      return 0;
    }
  }
  
  jresult = (jint)result; 
  {
    jenv->ReleaseByteArrayElements(jarg2, (jbyte *) arg2, 0); 
  }
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_FileHandleProxy_1flush(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  xtreemfs::FileHandle *arg1 = (xtreemfs::FileHandle *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xtreemfs::FileHandle **)&jarg1; 
  try {
    (arg1)->Flush();
  }
  catch(xtreemfs::AddressToUUIDNotFoundException const &_e) {
    {
      jclass clazz =  jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/AddressToUUIDNotFoundException");
      jenv->ThrowNew(clazz, (&_e)->what());
      return ;
    }
  }
  catch(xtreemfs::IOException const &_e) {
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaIOException, (&_e)->what());
      return ;
    }
  }
  catch(xtreemfs::PosixErrorException const &_e) {
    {
      jclass clazz = jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/PosixErrorException");
      jmethodID mid = jenv->GetMethodID(clazz, "<init>", "(Lorg/xtreemfs/foundation/pbrpc/generatedinterfaces/RPC$POSIXErrno;Ljava/lang/String;)V");
      
      jclass clazz2 = jenv->FindClass("org/xtreemfs/foundation/pbrpc/generatedinterfaces/RPC$POSIXErrno");
      jmethodID mid2 = jenv->GetStaticMethodID(clazz2, "valueOf", "(I)Lorg/xtreemfs/foundation/pbrpc/generatedinterfaces/RPC$POSIXErrno;");
      
      jobject posix_errno = jenv->CallStaticObjectMethod(clazz2, mid2, (&_e)->posix_errno());
      jstring what = jenv->NewStringUTF((&_e)->what());
      jthrowable o = static_cast<jthrowable>(jenv->NewObject(clazz, mid, posix_errno, what));
      jenv->Throw(o);
      
      return ;
    }
  }
  catch(xtreemfs::UnknownAddressSchemeException const &_e) {
    {
      jclass clazz = jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/XtreemFSException");
      jenv->ThrowNew(clazz, (&_e)->what());
      return ;
    }
  }
  catch(xtreemfs::XtreemFSException const &_e) {
    {
      jclass clazz = jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/XtreemFSException");
      jenv->ThrowNew(clazz, (&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_FileHandleProxy_1truncate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2, jlong jarg3) {
  xtreemfs::FileHandle *arg1 = (xtreemfs::FileHandle *) 0 ;
  xtreemfs::pbrpc::UserCredentials *arg2 = 0 ;
  int64_t arg3 ;
  xtreemfs::pbrpc::UserCredentials temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xtreemfs::FileHandle **)&jarg1; 
  {
    int proto_size = 0;
    boost::scoped_ptr<char> proto_buffer(
      JNIUtil::MakeCharArray(jenv, jarg2, &proto_size));
    
    bool parsed_ok = temp2.ParseFromArray(proto_buffer.get(), proto_size);
    if (!parsed_ok) {
      SWIG_JavaThrowException(jenv,
        SWIG_JavaRuntimeException,
        "Unable to parse xtreemfs::pbrpc::UserCredentials protocol message.");
    }
    arg2 = &temp2;
  }
  arg3 = (int64_t)jarg3; 
  try {
    (arg1)->Truncate((xtreemfs::pbrpc::UserCredentials const &)*arg2,arg3);
  }
  catch(xtreemfs::AddressToUUIDNotFoundException const &_e) {
    {
      jclass clazz =  jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/AddressToUUIDNotFoundException");
      jenv->ThrowNew(clazz, (&_e)->what());
      return ;
    }
  }
  catch(xtreemfs::IOException const &_e) {
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaIOException, (&_e)->what());
      return ;
    }
  }
  catch(xtreemfs::PosixErrorException const &_e) {
    {
      jclass clazz = jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/PosixErrorException");
      jmethodID mid = jenv->GetMethodID(clazz, "<init>", "(Lorg/xtreemfs/foundation/pbrpc/generatedinterfaces/RPC$POSIXErrno;Ljava/lang/String;)V");
      
      jclass clazz2 = jenv->FindClass("org/xtreemfs/foundation/pbrpc/generatedinterfaces/RPC$POSIXErrno");
      jmethodID mid2 = jenv->GetStaticMethodID(clazz2, "valueOf", "(I)Lorg/xtreemfs/foundation/pbrpc/generatedinterfaces/RPC$POSIXErrno;");
      
      jobject posix_errno = jenv->CallStaticObjectMethod(clazz2, mid2, (&_e)->posix_errno());
      jstring what = jenv->NewStringUTF((&_e)->what());
      jthrowable o = static_cast<jthrowable>(jenv->NewObject(clazz, mid, posix_errno, what));
      jenv->Throw(o);
      
      return ;
    }
  }
  catch(xtreemfs::UnknownAddressSchemeException const &_e) {
    {
      jclass clazz = jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/XtreemFSException");
      jenv->ThrowNew(clazz, (&_e)->what());
      return ;
    }
  }
  catch(xtreemfs::XtreemFSException const &_e) {
    {
      jclass clazz = jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/XtreemFSException");
      jenv->ThrowNew(clazz, (&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT jbyteArray JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_FileHandleProxy_1getAttr(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2) {
  jbyteArray jresult = 0 ;
  xtreemfs::FileHandle *arg1 = (xtreemfs::FileHandle *) 0 ;
  xtreemfs::pbrpc::UserCredentials *arg2 = 0 ;
  xtreemfs::pbrpc::Stat *arg3 = (xtreemfs::pbrpc::Stat *) 0 ;
  xtreemfs::pbrpc::UserCredentials temp2 ;
  xtreemfs::pbrpc::Stat temp3 ;
  
  (void)jenv;
  (void)jcls;
  {
    arg3 = &temp3;
  }
  (void)jarg1_;
  arg1 = *(xtreemfs::FileHandle **)&jarg1; 
  {
    int proto_size = 0;
    boost::scoped_ptr<char> proto_buffer(
      JNIUtil::MakeCharArray(jenv, jarg2, &proto_size));
    
    bool parsed_ok = temp2.ParseFromArray(proto_buffer.get(), proto_size);
    if (!parsed_ok) {
      SWIG_JavaThrowException(jenv,
        SWIG_JavaRuntimeException,
        "Unable to parse xtreemfs::pbrpc::UserCredentials protocol message.");
    }
    arg2 = &temp2;
  }
  try {
    (arg1)->GetAttr((xtreemfs::pbrpc::UserCredentials const &)*arg2,arg3);
  }
  catch(xtreemfs::AddressToUUIDNotFoundException const &_e) {
    {
      jclass clazz =  jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/AddressToUUIDNotFoundException");
      jenv->ThrowNew(clazz, (&_e)->what());
      return 0;
    }
  }
  catch(xtreemfs::IOException const &_e) {
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaIOException, (&_e)->what());
      return 0;
    }
  }
  catch(xtreemfs::PosixErrorException const &_e) {
    {
      jclass clazz = jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/PosixErrorException");
      jmethodID mid = jenv->GetMethodID(clazz, "<init>", "(Lorg/xtreemfs/foundation/pbrpc/generatedinterfaces/RPC$POSIXErrno;Ljava/lang/String;)V");
      
      jclass clazz2 = jenv->FindClass("org/xtreemfs/foundation/pbrpc/generatedinterfaces/RPC$POSIXErrno");
      jmethodID mid2 = jenv->GetStaticMethodID(clazz2, "valueOf", "(I)Lorg/xtreemfs/foundation/pbrpc/generatedinterfaces/RPC$POSIXErrno;");
      
      jobject posix_errno = jenv->CallStaticObjectMethod(clazz2, mid2, (&_e)->posix_errno());
      jstring what = jenv->NewStringUTF((&_e)->what());
      jthrowable o = static_cast<jthrowable>(jenv->NewObject(clazz, mid, posix_errno, what));
      jenv->Throw(o);
      
      return 0;
    }
  }
  catch(xtreemfs::UnknownAddressSchemeException const &_e) {
    {
      jclass clazz = jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/XtreemFSException");
      jenv->ThrowNew(clazz, (&_e)->what());
      return 0;
    }
  }
  catch(xtreemfs::XtreemFSException const &_e) {
    {
      jclass clazz = jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/XtreemFSException");
      jenv->ThrowNew(clazz, (&_e)->what());
      return 0;
    }
  }
  
  {
    boost::scoped_ptr<char> buf(new char[arg3->ByteSize()]);
    
    arg3->SerializeWithCachedSizesToArray(
      reinterpret_cast<google::protobuf::uint8*>(buf.get()));
    jresult = JNIUtil::MakeJByteArray(jenv, buf.get(), arg3->ByteSize());
  }
  return jresult;
}


SWIGEXPORT jbyteArray JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_FileHandleProxy_1acquireLock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jlong jarg4, jboolean jarg5, jboolean jarg6) {
  jbyteArray jresult = 0 ;
  xtreemfs::FileHandle *arg1 = (xtreemfs::FileHandle *) 0 ;
  int arg2 ;
  uint64_t arg3 ;
  uint64_t arg4 ;
  bool arg5 ;
  bool arg6 ;
  xtreemfs::pbrpc::Lock *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xtreemfs::FileHandle **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (uint64_t)jarg3; 
  arg4 = (uint64_t)jarg4; 
  arg5 = jarg5 ? true : false; 
  arg6 = jarg6 ? true : false; 
  try {
    result = (xtreemfs::pbrpc::Lock *)(arg1)->AcquireLock(arg2,arg3,arg4,arg5,arg6);
  }
  catch(xtreemfs::AddressToUUIDNotFoundException const &_e) {
    {
      jclass clazz =  jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/AddressToUUIDNotFoundException");
      jenv->ThrowNew(clazz, (&_e)->what());
      return 0;
    }
  }
  catch(xtreemfs::IOException const &_e) {
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaIOException, (&_e)->what());
      return 0;
    }
  }
  catch(xtreemfs::PosixErrorException const &_e) {
    {
      jclass clazz = jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/PosixErrorException");
      jmethodID mid = jenv->GetMethodID(clazz, "<init>", "(Lorg/xtreemfs/foundation/pbrpc/generatedinterfaces/RPC$POSIXErrno;Ljava/lang/String;)V");
      
      jclass clazz2 = jenv->FindClass("org/xtreemfs/foundation/pbrpc/generatedinterfaces/RPC$POSIXErrno");
      jmethodID mid2 = jenv->GetStaticMethodID(clazz2, "valueOf", "(I)Lorg/xtreemfs/foundation/pbrpc/generatedinterfaces/RPC$POSIXErrno;");
      
      jobject posix_errno = jenv->CallStaticObjectMethod(clazz2, mid2, (&_e)->posix_errno());
      jstring what = jenv->NewStringUTF((&_e)->what());
      jthrowable o = static_cast<jthrowable>(jenv->NewObject(clazz, mid, posix_errno, what));
      jenv->Throw(o);
      
      return 0;
    }
  }
  catch(xtreemfs::UnknownAddressSchemeException const &_e) {
    {
      jclass clazz = jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/XtreemFSException");
      jenv->ThrowNew(clazz, (&_e)->what());
      return 0;
    }
  }
  catch(xtreemfs::XtreemFSException const &_e) {
    {
      jclass clazz = jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/XtreemFSException");
      jenv->ThrowNew(clazz, (&_e)->what());
      return 0;
    }
  }
  
  {
    boost::scoped_ptr<char> buf(new char[result->ByteSize()]);
    
    result->SerializeWithCachedSizesToArray(
      reinterpret_cast<google::protobuf::uint8*>(buf.get()));
    jresult = JNIUtil::MakeJByteArray(jenv, buf.get(), result->ByteSize());
    if (true) {
      // To prevent a memory leak.
      delete result;
      result = NULL;
    }
  }
  return jresult;
}


SWIGEXPORT jbyteArray JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_FileHandleProxy_1checkLock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jlong jarg4, jboolean jarg5) {
  jbyteArray jresult = 0 ;
  xtreemfs::FileHandle *arg1 = (xtreemfs::FileHandle *) 0 ;
  int arg2 ;
  uint64_t arg3 ;
  uint64_t arg4 ;
  bool arg5 ;
  xtreemfs::pbrpc::Lock *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xtreemfs::FileHandle **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (uint64_t)jarg3; 
  arg4 = (uint64_t)jarg4; 
  arg5 = jarg5 ? true : false; 
  try {
    result = (xtreemfs::pbrpc::Lock *)(arg1)->CheckLock(arg2,arg3,arg4,arg5);
  }
  catch(xtreemfs::AddressToUUIDNotFoundException const &_e) {
    {
      jclass clazz =  jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/AddressToUUIDNotFoundException");
      jenv->ThrowNew(clazz, (&_e)->what());
      return 0;
    }
  }
  catch(xtreemfs::IOException const &_e) {
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaIOException, (&_e)->what());
      return 0;
    }
  }
  catch(xtreemfs::PosixErrorException const &_e) {
    {
      jclass clazz = jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/PosixErrorException");
      jmethodID mid = jenv->GetMethodID(clazz, "<init>", "(Lorg/xtreemfs/foundation/pbrpc/generatedinterfaces/RPC$POSIXErrno;Ljava/lang/String;)V");
      
      jclass clazz2 = jenv->FindClass("org/xtreemfs/foundation/pbrpc/generatedinterfaces/RPC$POSIXErrno");
      jmethodID mid2 = jenv->GetStaticMethodID(clazz2, "valueOf", "(I)Lorg/xtreemfs/foundation/pbrpc/generatedinterfaces/RPC$POSIXErrno;");
      
      jobject posix_errno = jenv->CallStaticObjectMethod(clazz2, mid2, (&_e)->posix_errno());
      jstring what = jenv->NewStringUTF((&_e)->what());
      jthrowable o = static_cast<jthrowable>(jenv->NewObject(clazz, mid, posix_errno, what));
      jenv->Throw(o);
      
      return 0;
    }
  }
  catch(xtreemfs::UnknownAddressSchemeException const &_e) {
    {
      jclass clazz = jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/XtreemFSException");
      jenv->ThrowNew(clazz, (&_e)->what());
      return 0;
    }
  }
  catch(xtreemfs::XtreemFSException const &_e) {
    {
      jclass clazz = jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/XtreemFSException");
      jenv->ThrowNew(clazz, (&_e)->what());
      return 0;
    }
  }
  
  {
    boost::scoped_ptr<char> buf(new char[result->ByteSize()]);
    
    result->SerializeWithCachedSizesToArray(
      reinterpret_cast<google::protobuf::uint8*>(buf.get()));
    jresult = JNIUtil::MakeJByteArray(jenv, buf.get(), result->ByteSize());
    if (true) {
      // To prevent a memory leak.
      delete result;
      result = NULL;
    }
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_FileHandleProxy_1releaseLock_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jlong jarg4, jboolean jarg5) {
  xtreemfs::FileHandle *arg1 = (xtreemfs::FileHandle *) 0 ;
  int arg2 ;
  uint64_t arg3 ;
  uint64_t arg4 ;
  bool arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xtreemfs::FileHandle **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (uint64_t)jarg3; 
  arg4 = (uint64_t)jarg4; 
  arg5 = jarg5 ? true : false; 
  try {
    (arg1)->ReleaseLock(arg2,arg3,arg4,arg5);
  }
  catch(xtreemfs::AddressToUUIDNotFoundException const &_e) {
    {
      jclass clazz =  jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/AddressToUUIDNotFoundException");
      jenv->ThrowNew(clazz, (&_e)->what());
      return ;
    }
  }
  catch(xtreemfs::IOException const &_e) {
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaIOException, (&_e)->what());
      return ;
    }
  }
  catch(xtreemfs::PosixErrorException const &_e) {
    {
      jclass clazz = jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/PosixErrorException");
      jmethodID mid = jenv->GetMethodID(clazz, "<init>", "(Lorg/xtreemfs/foundation/pbrpc/generatedinterfaces/RPC$POSIXErrno;Ljava/lang/String;)V");
      
      jclass clazz2 = jenv->FindClass("org/xtreemfs/foundation/pbrpc/generatedinterfaces/RPC$POSIXErrno");
      jmethodID mid2 = jenv->GetStaticMethodID(clazz2, "valueOf", "(I)Lorg/xtreemfs/foundation/pbrpc/generatedinterfaces/RPC$POSIXErrno;");
      
      jobject posix_errno = jenv->CallStaticObjectMethod(clazz2, mid2, (&_e)->posix_errno());
      jstring what = jenv->NewStringUTF((&_e)->what());
      jthrowable o = static_cast<jthrowable>(jenv->NewObject(clazz, mid, posix_errno, what));
      jenv->Throw(o);
      
      return ;
    }
  }
  catch(xtreemfs::UnknownAddressSchemeException const &_e) {
    {
      jclass clazz = jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/XtreemFSException");
      jenv->ThrowNew(clazz, (&_e)->what());
      return ;
    }
  }
  catch(xtreemfs::XtreemFSException const &_e) {
    {
      jclass clazz = jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/XtreemFSException");
      jenv->ThrowNew(clazz, (&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_FileHandleProxy_1releaseLock_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2) {
  xtreemfs::FileHandle *arg1 = (xtreemfs::FileHandle *) 0 ;
  xtreemfs::pbrpc::Lock *arg2 = 0 ;
  xtreemfs::pbrpc::Lock temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xtreemfs::FileHandle **)&jarg1; 
  {
    int proto_size = 0;
    boost::scoped_ptr<char> proto_buffer(
      JNIUtil::MakeCharArray(jenv, jarg2, &proto_size));
    
    bool parsed_ok = temp2.ParseFromArray(proto_buffer.get(), proto_size);
    if (!parsed_ok) {
      SWIG_JavaThrowException(jenv,
        SWIG_JavaRuntimeException,
        "Unable to parse xtreemfs::pbrpc::Lock protocol message.");
    }
    arg2 = &temp2;
  }
  try {
    (arg1)->ReleaseLock((xtreemfs::pbrpc::Lock const &)*arg2);
  }
  catch(xtreemfs::AddressToUUIDNotFoundException const &_e) {
    {
      jclass clazz =  jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/AddressToUUIDNotFoundException");
      jenv->ThrowNew(clazz, (&_e)->what());
      return ;
    }
  }
  catch(xtreemfs::IOException const &_e) {
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaIOException, (&_e)->what());
      return ;
    }
  }
  catch(xtreemfs::PosixErrorException const &_e) {
    {
      jclass clazz = jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/PosixErrorException");
      jmethodID mid = jenv->GetMethodID(clazz, "<init>", "(Lorg/xtreemfs/foundation/pbrpc/generatedinterfaces/RPC$POSIXErrno;Ljava/lang/String;)V");
      
      jclass clazz2 = jenv->FindClass("org/xtreemfs/foundation/pbrpc/generatedinterfaces/RPC$POSIXErrno");
      jmethodID mid2 = jenv->GetStaticMethodID(clazz2, "valueOf", "(I)Lorg/xtreemfs/foundation/pbrpc/generatedinterfaces/RPC$POSIXErrno;");
      
      jobject posix_errno = jenv->CallStaticObjectMethod(clazz2, mid2, (&_e)->posix_errno());
      jstring what = jenv->NewStringUTF((&_e)->what());
      jthrowable o = static_cast<jthrowable>(jenv->NewObject(clazz, mid, posix_errno, what));
      jenv->Throw(o);
      
      return ;
    }
  }
  catch(xtreemfs::UnknownAddressSchemeException const &_e) {
    {
      jclass clazz = jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/XtreemFSException");
      jenv->ThrowNew(clazz, (&_e)->what());
      return ;
    }
  }
  catch(xtreemfs::XtreemFSException const &_e) {
    {
      jclass clazz = jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/XtreemFSException");
      jenv->ThrowNew(clazz, (&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_FileHandleProxy_1releaseLockOfProcess(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  xtreemfs::FileHandle *arg1 = (xtreemfs::FileHandle *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xtreemfs::FileHandle **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    (arg1)->ReleaseLockOfProcess(arg2);
  }
  catch(xtreemfs::AddressToUUIDNotFoundException const &_e) {
    {
      jclass clazz =  jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/AddressToUUIDNotFoundException");
      jenv->ThrowNew(clazz, (&_e)->what());
      return ;
    }
  }
  catch(xtreemfs::IOException const &_e) {
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaIOException, (&_e)->what());
      return ;
    }
  }
  catch(xtreemfs::PosixErrorException const &_e) {
    {
      jclass clazz = jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/PosixErrorException");
      jmethodID mid = jenv->GetMethodID(clazz, "<init>", "(Lorg/xtreemfs/foundation/pbrpc/generatedinterfaces/RPC$POSIXErrno;Ljava/lang/String;)V");
      
      jclass clazz2 = jenv->FindClass("org/xtreemfs/foundation/pbrpc/generatedinterfaces/RPC$POSIXErrno");
      jmethodID mid2 = jenv->GetStaticMethodID(clazz2, "valueOf", "(I)Lorg/xtreemfs/foundation/pbrpc/generatedinterfaces/RPC$POSIXErrno;");
      
      jobject posix_errno = jenv->CallStaticObjectMethod(clazz2, mid2, (&_e)->posix_errno());
      jstring what = jenv->NewStringUTF((&_e)->what());
      jthrowable o = static_cast<jthrowable>(jenv->NewObject(clazz, mid, posix_errno, what));
      jenv->Throw(o);
      
      return ;
    }
  }
  catch(xtreemfs::UnknownAddressSchemeException const &_e) {
    {
      jclass clazz = jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/XtreemFSException");
      jenv->ThrowNew(clazz, (&_e)->what());
      return ;
    }
  }
  catch(xtreemfs::XtreemFSException const &_e) {
    {
      jclass clazz = jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/XtreemFSException");
      jenv->ThrowNew(clazz, (&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_FileHandleProxy_1pingReplica(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  xtreemfs::FileHandle *arg1 = (xtreemfs::FileHandle *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xtreemfs::FileHandle **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  try {
    (arg1)->PingReplica((std::string const &)*arg2);
  }
  catch(xtreemfs::AddressToUUIDNotFoundException const &_e) {
    {
      jclass clazz =  jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/AddressToUUIDNotFoundException");
      jenv->ThrowNew(clazz, (&_e)->what());
      return ;
    }
  }
  catch(xtreemfs::IOException const &_e) {
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaIOException, (&_e)->what());
      return ;
    }
  }
  catch(xtreemfs::PosixErrorException const &_e) {
    {
      jclass clazz = jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/PosixErrorException");
      jmethodID mid = jenv->GetMethodID(clazz, "<init>", "(Lorg/xtreemfs/foundation/pbrpc/generatedinterfaces/RPC$POSIXErrno;Ljava/lang/String;)V");
      
      jclass clazz2 = jenv->FindClass("org/xtreemfs/foundation/pbrpc/generatedinterfaces/RPC$POSIXErrno");
      jmethodID mid2 = jenv->GetStaticMethodID(clazz2, "valueOf", "(I)Lorg/xtreemfs/foundation/pbrpc/generatedinterfaces/RPC$POSIXErrno;");
      
      jobject posix_errno = jenv->CallStaticObjectMethod(clazz2, mid2, (&_e)->posix_errno());
      jstring what = jenv->NewStringUTF((&_e)->what());
      jthrowable o = static_cast<jthrowable>(jenv->NewObject(clazz, mid, posix_errno, what));
      jenv->Throw(o);
      
      return ;
    }
  }
  catch(xtreemfs::UnknownAddressSchemeException const &_e) {
    {
      jclass clazz = jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/XtreemFSException");
      jenv->ThrowNew(clazz, (&_e)->what());
      return ;
    }
  }
  catch(xtreemfs::UUIDNotInXlocSetException const &_e) {
    {
      jclass clazz =  jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/UUIDNotInXlocSetException");
      jenv->ThrowNew(clazz, (&_e)->what());
      return ;
    }
  }
  catch(xtreemfs::XtreemFSException const &_e) {
    {
      jclass clazz = jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/XtreemFSException");
      jenv->ThrowNew(clazz, (&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_FileHandleProxy_1close(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  xtreemfs::FileHandle *arg1 = (xtreemfs::FileHandle *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xtreemfs::FileHandle **)&jarg1; 
  try {
    (arg1)->Close();
  }
  catch(xtreemfs::AddressToUUIDNotFoundException const &_e) {
    {
      jclass clazz =  jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/AddressToUUIDNotFoundException");
      jenv->ThrowNew(clazz, (&_e)->what());
      return ;
    }
  }
  catch(xtreemfs::FileInfoNotFoundException const &_e) {
    {
      jclass clazz = jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/XtreemFSException");
      jenv->ThrowNew(clazz, (&_e)->what());
      return ;
    }
  }
  catch(xtreemfs::FileHandleNotFoundException const &_e) {
    {
      jclass clazz = jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/XtreemFSException");
      jenv->ThrowNew(clazz, (&_e)->what());
      return ;
    }
  }
  catch(xtreemfs::IOException const &_e) {
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaIOException, (&_e)->what());
      return ;
    }
  }
  catch(xtreemfs::PosixErrorException const &_e) {
    {
      jclass clazz = jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/PosixErrorException");
      jmethodID mid = jenv->GetMethodID(clazz, "<init>", "(Lorg/xtreemfs/foundation/pbrpc/generatedinterfaces/RPC$POSIXErrno;Ljava/lang/String;)V");
      
      jclass clazz2 = jenv->FindClass("org/xtreemfs/foundation/pbrpc/generatedinterfaces/RPC$POSIXErrno");
      jmethodID mid2 = jenv->GetStaticMethodID(clazz2, "valueOf", "(I)Lorg/xtreemfs/foundation/pbrpc/generatedinterfaces/RPC$POSIXErrno;");
      
      jobject posix_errno = jenv->CallStaticObjectMethod(clazz2, mid2, (&_e)->posix_errno());
      jstring what = jenv->NewStringUTF((&_e)->what());
      jthrowable o = static_cast<jthrowable>(jenv->NewObject(clazz, mid, posix_errno, what));
      jenv->Throw(o);
      
      return ;
    }
  }
  catch(xtreemfs::UnknownAddressSchemeException const &_e) {
    {
      jclass clazz = jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/XtreemFSException");
      jenv->ThrowNew(clazz, (&_e)->what());
      return ;
    }
  }
  catch(xtreemfs::XtreemFSException const &_e) {
    {
      jclass clazz = jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/XtreemFSException");
      jenv->ThrowNew(clazz, (&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT jint JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_FileHandleProxy_1readDirect(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2, jint jarg3, jlong jarg4) {
  jint jresult = 0 ;
  xtreemfs::FileHandle *arg1 = (xtreemfs::FileHandle *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  int64_t arg4 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xtreemfs::FileHandle **)&jarg1; 
  {
    arg2 = (char*) jenv->GetDirectBufferAddress(jarg2);
    if (arg2 == NULL) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unable to get address of direct buffer. Buffer must be allocated direct.");
    }
  }
  arg3 = (size_t)jarg3; 
  arg4 = (int64_t)jarg4; 
  try {
    result = (int)xtreemfs_FileHandle_readDirect(arg1,arg2,arg3,arg4);
  }
  catch(xtreemfs::AddressToUUIDNotFoundException const &_e) {
    {
      jclass clazz =  jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/AddressToUUIDNotFoundException");
      jenv->ThrowNew(clazz, (&_e)->what());
      return 0;
    }
  }
  catch(xtreemfs::IOException const &_e) {
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaIOException, (&_e)->what());
      return 0;
    }
  }
  catch(xtreemfs::PosixErrorException const &_e) {
    {
      jclass clazz = jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/PosixErrorException");
      jmethodID mid = jenv->GetMethodID(clazz, "<init>", "(Lorg/xtreemfs/foundation/pbrpc/generatedinterfaces/RPC$POSIXErrno;Ljava/lang/String;)V");
      
      jclass clazz2 = jenv->FindClass("org/xtreemfs/foundation/pbrpc/generatedinterfaces/RPC$POSIXErrno");
      jmethodID mid2 = jenv->GetStaticMethodID(clazz2, "valueOf", "(I)Lorg/xtreemfs/foundation/pbrpc/generatedinterfaces/RPC$POSIXErrno;");
      
      jobject posix_errno = jenv->CallStaticObjectMethod(clazz2, mid2, (&_e)->posix_errno());
      jstring what = jenv->NewStringUTF((&_e)->what());
      jthrowable o = static_cast<jthrowable>(jenv->NewObject(clazz, mid, posix_errno, what));
      jenv->Throw(o);
      
      return 0;
    }
  }
  catch(xtreemfs::UnknownAddressSchemeException const &_e) {
    {
      jclass clazz = jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/XtreemFSException");
      jenv->ThrowNew(clazz, (&_e)->what());
      return 0;
    }
  }
  catch(xtreemfs::XtreemFSException const &_e) {
    {
      jclass clazz = jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/XtreemFSException");
      jenv->ThrowNew(clazz, (&_e)->what());
      return 0;
    }
  }
  
  jresult = (jint)result; 
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_FileHandleProxy_1writeDirect(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2, jint jarg3, jlong jarg4) {
  jint jresult = 0 ;
  xtreemfs::FileHandle *arg1 = (xtreemfs::FileHandle *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  int64_t arg4 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xtreemfs::FileHandle **)&jarg1; 
  {
    arg2 = (char*) jenv->GetDirectBufferAddress(jarg2);
    if (arg2 == NULL) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unable to get address of direct buffer. Buffer must be allocated direct.");
    }
  }
  arg3 = (size_t)jarg3; 
  arg4 = (int64_t)jarg4; 
  try {
    result = (int)xtreemfs_FileHandle_writeDirect(arg1,(char const *)arg2,arg3,arg4);
  }
  catch(xtreemfs::AddressToUUIDNotFoundException const &_e) {
    {
      jclass clazz =  jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/AddressToUUIDNotFoundException");
      jenv->ThrowNew(clazz, (&_e)->what());
      return 0;
    }
  }
  catch(xtreemfs::IOException const &_e) {
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaIOException, (&_e)->what());
      return 0;
    }
  }
  catch(xtreemfs::PosixErrorException const &_e) {
    {
      jclass clazz = jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/PosixErrorException");
      jmethodID mid = jenv->GetMethodID(clazz, "<init>", "(Lorg/xtreemfs/foundation/pbrpc/generatedinterfaces/RPC$POSIXErrno;Ljava/lang/String;)V");
      
      jclass clazz2 = jenv->FindClass("org/xtreemfs/foundation/pbrpc/generatedinterfaces/RPC$POSIXErrno");
      jmethodID mid2 = jenv->GetStaticMethodID(clazz2, "valueOf", "(I)Lorg/xtreemfs/foundation/pbrpc/generatedinterfaces/RPC$POSIXErrno;");
      
      jobject posix_errno = jenv->CallStaticObjectMethod(clazz2, mid2, (&_e)->posix_errno());
      jstring what = jenv->NewStringUTF((&_e)->what());
      jthrowable o = static_cast<jthrowable>(jenv->NewObject(clazz, mid, posix_errno, what));
      jenv->Throw(o);
      
      return 0;
    }
  }
  catch(xtreemfs::UnknownAddressSchemeException const &_e) {
    {
      jclass clazz = jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/XtreemFSException");
      jenv->ThrowNew(clazz, (&_e)->what());
      return 0;
    }
  }
  catch(xtreemfs::XtreemFSException const &_e) {
    {
      jclass clazz = jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/XtreemFSException");
      jenv->ThrowNew(clazz, (&_e)->what());
      return 0;
    }
  }
  
  jresult = (jint)result; 
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_FileHandleProxy_1read_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2, jint jarg3, jint jarg4, jlong jarg5) {
  jint jresult = 0 ;
  xtreemfs::FileHandle *arg1 = (xtreemfs::FileHandle *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  size_t arg4 ;
  int64_t arg5 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xtreemfs::FileHandle **)&jarg1; 
  {
    arg2 = (char *) jenv->GetByteArrayElements(jarg2, 0); 
  }
  arg3 = (int)jarg3; 
  arg4 = (size_t)jarg4; 
  arg5 = (int64_t)jarg5; 
  try {
    result = (int)xtreemfs_FileHandle_read__SWIG_1(arg1,arg2,arg3,arg4,arg5);
  }
  catch(xtreemfs::AddressToUUIDNotFoundException const &_e) {
    {
      jclass clazz =  jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/AddressToUUIDNotFoundException");
      jenv->ThrowNew(clazz, (&_e)->what());
      return 0;
    }
  }
  catch(xtreemfs::IOException const &_e) {
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaIOException, (&_e)->what());
      return 0;
    }
  }
  catch(xtreemfs::PosixErrorException const &_e) {
    {
      jclass clazz = jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/PosixErrorException");
      jmethodID mid = jenv->GetMethodID(clazz, "<init>", "(Lorg/xtreemfs/foundation/pbrpc/generatedinterfaces/RPC$POSIXErrno;Ljava/lang/String;)V");
      
      jclass clazz2 = jenv->FindClass("org/xtreemfs/foundation/pbrpc/generatedinterfaces/RPC$POSIXErrno");
      jmethodID mid2 = jenv->GetStaticMethodID(clazz2, "valueOf", "(I)Lorg/xtreemfs/foundation/pbrpc/generatedinterfaces/RPC$POSIXErrno;");
      
      jobject posix_errno = jenv->CallStaticObjectMethod(clazz2, mid2, (&_e)->posix_errno());
      jstring what = jenv->NewStringUTF((&_e)->what());
      jthrowable o = static_cast<jthrowable>(jenv->NewObject(clazz, mid, posix_errno, what));
      jenv->Throw(o);
      
      return 0;
    }
  }
  catch(xtreemfs::UnknownAddressSchemeException const &_e) {
    {
      jclass clazz = jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/XtreemFSException");
      jenv->ThrowNew(clazz, (&_e)->what());
      return 0;
    }
  }
  catch(xtreemfs::XtreemFSException const &_e) {
    {
      jclass clazz = jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/XtreemFSException");
      jenv->ThrowNew(clazz, (&_e)->what());
      return 0;
    }
  }
  
  jresult = (jint)result; 
  {
    jenv->ReleaseByteArrayElements(jarg2, (jbyte *) arg2, 0); 
  }
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_xtreemfs_common_libxtreemfs_jni_generated_xtreemfs_1jniJNI_FileHandleProxy_1write_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2, jint jarg3, jint jarg4, jlong jarg5) {
  jint jresult = 0 ;
  xtreemfs::FileHandle *arg1 = (xtreemfs::FileHandle *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  size_t arg4 ;
  int64_t arg5 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(xtreemfs::FileHandle **)&jarg1; 
  {
    arg2 = (char *) jenv->GetByteArrayElements(jarg2, 0); 
  }
  arg3 = (int)jarg3; 
  arg4 = (size_t)jarg4; 
  arg5 = (int64_t)jarg5; 
  try {
    result = (int)xtreemfs_FileHandle_write__SWIG_1(arg1,(char const *)arg2,arg3,arg4,arg5);
  }
  catch(xtreemfs::AddressToUUIDNotFoundException const &_e) {
    {
      jclass clazz =  jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/AddressToUUIDNotFoundException");
      jenv->ThrowNew(clazz, (&_e)->what());
      return 0;
    }
  }
  catch(xtreemfs::IOException const &_e) {
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaIOException, (&_e)->what());
      return 0;
    }
  }
  catch(xtreemfs::PosixErrorException const &_e) {
    {
      jclass clazz = jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/PosixErrorException");
      jmethodID mid = jenv->GetMethodID(clazz, "<init>", "(Lorg/xtreemfs/foundation/pbrpc/generatedinterfaces/RPC$POSIXErrno;Ljava/lang/String;)V");
      
      jclass clazz2 = jenv->FindClass("org/xtreemfs/foundation/pbrpc/generatedinterfaces/RPC$POSIXErrno");
      jmethodID mid2 = jenv->GetStaticMethodID(clazz2, "valueOf", "(I)Lorg/xtreemfs/foundation/pbrpc/generatedinterfaces/RPC$POSIXErrno;");
      
      jobject posix_errno = jenv->CallStaticObjectMethod(clazz2, mid2, (&_e)->posix_errno());
      jstring what = jenv->NewStringUTF((&_e)->what());
      jthrowable o = static_cast<jthrowable>(jenv->NewObject(clazz, mid, posix_errno, what));
      jenv->Throw(o);
      
      return 0;
    }
  }
  catch(xtreemfs::UnknownAddressSchemeException const &_e) {
    {
      jclass clazz = jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/XtreemFSException");
      jenv->ThrowNew(clazz, (&_e)->what());
      return 0;
    }
  }
  catch(xtreemfs::XtreemFSException const &_e) {
    {
      jclass clazz = jenv->FindClass("org/xtreemfs/common/libxtreemfs/exceptions/XtreemFSException");
      jenv->ThrowNew(clazz, (&_e)->what());
      return 0;
    }
  }
  
  jresult = (jint)result; 
  {
    jenv->ReleaseByteArrayElements(jarg2, (jbyte *) arg2, 0); 
  }
  
  return jresult;
}


#ifdef __cplusplus
}
#endif

